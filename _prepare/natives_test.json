{"CFX":{"0x4AFD2499":{"name":"ADD_MINIMAP_OVERLAY","params":[{"name":"name","type":"char*","description":"The path to a `.gfx` file in the current resource. It has to be specified as a `file`."}],"results":"int","description":"Loads a minimap overlay from a GFx file in the current resource.","examples":[],"hash":"0x4AFD2499","ns":"CFX","apiset":"client","resultsDescription":"A minimap overlay ID."},"0xA66F8F75":{"name":"ADD_REPLACE_TEXTURE","params":[{"name":"origTxd","type":"char*"},{"name":"origTxn","type":"char*"},{"name":"newTxd","type":"char*"},{"name":"newTxn","type":"char*"}],"results":"void","description":"Experimental natives, please do not use in a live environment.","examples":[],"hash":"0xA66F8F75","ns":"CFX","apiset":"client"},"0x289DA860":{"name":"ADD_TEXT_ENTRY_BY_HASH","params":[{"name":"entryKey","type":"Hash"},{"name":"entryText","type":"char*"}],"results":"void","description":"","examples":[],"hash":"0x289DA860","ns":"CFX","apiset":"client"},"0x32CA01C3":{"name":"ADD_TEXT_ENTRY","params":[{"name":"entryKey","type":"char*"},{"name":"entryText","type":"char*"}],"results":"void","description":"","examples":[],"hash":"0x32CA01C3","ns":"CFX","apiset":"client"},"0x4C89C0ED":{"name":"CALL_MINIMAP_SCALEFORM_FUNCTION","params":[{"name":"miniMap","type":"int","description":"The minimap overlay ID."},{"name":"fnName","type":"char*","description":"A function in the overlay's TIMELINE."}],"results":"BOOL","description":"This is similar to the PushScaleformMovieFunction natives, except it calls in the `TIMELINE` of a minimap overlay.","examples":[],"hash":"0x4C89C0ED","ns":"CFX","apiset":"client","resultsDescription":""},"0xFA29D35D":{"name":"CANCEL_EVENT","params":[],"results":"void","description":"Cancels the currently executing event.","examples":[],"hash":"0xFA29D35D","ns":"CFX","apiset":"shared"},"0x19D81F4E":{"name":"COMMIT_RUNTIME_TEXTURE","params":[{"name":"tex","type":"long","description":"The runtime texture handle."}],"results":"void","description":"Commits the backing pixels to the specified runtime texture.","examples":[],"hash":"0x19D81F4E","ns":"CFX","apiset":"client"},"0xB135472B":{"name":"CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE","params":[{"name":"txd","type":"long","description":"A handle to the runtime TXD to create the runtime texture in."},{"name":"txn","type":"char*","description":"The name for the texture in the runtime texture dictionary."},{"name":"duiHandle","type":"char*","description":"The DUI handle returned from GET_DUI_HANDLE."}],"results":"long","description":"Creates a runtime texture from a DUI handle.","examples":[],"hash":"0xB135472B","ns":"CFX","apiset":"client","resultsDescription":"The runtime texture handle."},"0x786D8BC3":{"name":"CREATE_RUNTIME_TEXTURE_FROM_IMAGE","params":[{"name":"txd","type":"long","description":"A handle to the runtime TXD to create the runtime texture in."},{"name":"txn","type":"char*","description":"The name for the texture in the runtime texture dictionary."},{"name":"fileName","type":"char*","description":"The file name of an image to load. This should preferably be a PNG, and has to be specified as a `file` in the resource manifest."}],"results":"long","description":"Creates a runtime texture from the specified file in the current resource.","examples":[],"hash":"0x786D8BC3","ns":"CFX","apiset":"client","resultsDescription":"A runtime texture handle."},"0x1E86F206":{"name":"DELETE_FUNCTION_REFERENCE","params":[{"name":"referenceIdentity","type":"char*"}],"results":"void","description":"","examples":[],"hash":"0x1E86F206","ns":"CFX","apiset":"shared"},"0xFAA3D236":{"name":"DELETE_ENTITY","params":[{"name":"entity","type":"Entity","description":"The entity to delete."}],"results":"void","description":"Deletes the specified entity.","examples":[],"hash":"0xFAA3D236","ns":"CFX","apiset":"server"},"0x4107EF0F":{"name":"FIND_NEXT_PICKUP","params":[{"name":"findHandle","type":"int"},{"name":"outEntity","type":"Entity*"}],"results":"BOOL","description":"","examples":[],"hash":"0x4107EF0F","ns":"CFX","apiset":"client","resultsDescription":""},"0xA085CB10":{"name":"DESTROY_DUI","params":[{"name":"duiObject","type":"long","description":"The DUI browser handle."}],"results":"void","description":"Destroys a DUI browser.","examples":[],"hash":"0xA085CB10","ns":"CFX","apiset":"client"},"0x38D19210":{"name":"EXPERIMENTAL_SAVE_CLONE_SYNC","params":[{"name":"entity","type":"Entity"}],"results":"char*","description":"This native is not implemented.","examples":[],"hash":"0x38D19210","ns":"CFX","apiset":"client","resultsDescription":""},"0xF4E2079D":{"name":"DUPLICATE_FUNCTION_REFERENCE","params":[{"name":"referenceIdentity","type":"char*"}],"results":"char*","description":"","examples":[],"hash":"0xF4E2079D","ns":"CFX","apiset":"shared","resultsDescription":""},"0xFB012961":{"name":"FIND_FIRST_PED","params":[{"name":"outEntity","type":"Entity*"}],"results":"int","description":"","examples":[],"hash":"0xFB012961","ns":"CFX","apiset":"client","resultsDescription":""},"0xF97B1C93":{"name":"ENABLE_ENHANCED_HOST_SUPPORT","params":[{"name":"enabled","type":"BOOL"}],"results":"void","description":"","examples":[],"hash":"0xF97B1C93","ns":"CFX","apiset":"server"},"0x9227415A":{"name":"END_FIND_VEHICLE","params":[{"name":"findHandle","type":"int"}],"results":"void","description":"","examples":[],"hash":"0x9227415A","ns":"CFX","apiset":"client"},"0x3C407D53":{"name":"END_FIND_PICKUP","params":[{"name":"findHandle","type":"int"}],"results":"void","description":"","examples":[],"hash":"0x3C407D53","ns":"CFX","apiset":"client"},"0x7389B5DF":{"name":"DELETE_RESOURCE_KVP","params":[{"name":"key","type":"char*"}],"results":"void","description":"","examples":[],"hash":"0x7389B5DF","ns":"CFX","apiset":"shared"},"0xD2CB95A3":{"name":"EXPERIMENTAL_LOAD_CLONE_CREATE","params":[{"name":"data","type":"char*"},{"name":"objectId","type":"int"},{"name":"tree","type":"char*"}],"results":"Entity","description":"This native is not implemented.","examples":[],"hash":"0xD2CB95A3","ns":"CFX","apiset":"client","resultsDescription":""},"0x167ABA27":{"name":"DOES_PLAYER_OWN_SKU","params":[{"name":"playerSrc","type":"char*","description":"The player handle"},{"name":"skuId","type":"int","description":"The ID of the SKU."}],"results":"BOOL","description":"Requests whether or not the player owns the specified SKU.","examples":[],"hash":"0x167ABA27","ns":"CFX","apiset":"server","resultsDescription":"A boolean."},"0x15E55694":{"name":"FIND_FIRST_VEHICLE","params":[{"name":"outEntity","type":"Entity*"}],"results":"int","description":"","examples":[],"hash":"0x15E55694","ns":"CFX","apiset":"client","resultsDescription":""},"0x561C060B":{"name":"EXECUTE_COMMAND","params":[{"name":"commandString","type":"char*"}],"results":"void","description":"","examples":[],"hash":"0x561C060B","ns":"CFX","apiset":"shared"},"0xBD7BEBC5":{"name":"FIND_KVP","params":[{"name":"handle","type":"int"}],"results":"char*","description":"","examples":[],"hash":"0xBD7BEBC5","ns":"CFX","apiset":"shared","resultsDescription":""},"0x23EAF899":{"name":"CREATE_DUI","params":[{"name":"url","type":"char*","description":"The initial URL to load in the browser."},{"name":"width","type":"int","description":"The width of the backing surface."},{"name":"height","type":"int","description":"The height of the backing surface."}],"results":"long","description":"Creates a DUI browser. This can be used to draw on a runtime texture using CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE.","examples":[],"hash":"0x23EAF899","ns":"CFX","apiset":"client","resultsDescription":"A DUI object."},"0x1F3AC778":{"name":"CREATE_RUNTIME_TXD","params":[{"name":"name","type":"char*","description":"The name for the runtime TXD."}],"results":"long","description":"Creates a runtime texture dictionary with the specified name.\r\nExample:\n\n```lua\nlocal txd = CreateRuntimeTxd('meow')\n```","examples":[],"hash":"0x1F3AC778","ns":"CFX","apiset":"client","resultsDescription":"A handle to the runtime TXD."},"0xDEF0480B":{"name":"DOES_PLAYER_OWN_SKU_EXT","params":[{"name":"playerSrc","type":"char*","description":"The player handle"},{"name":"skuId","type":"int","description":"The package ID on Tebex."}],"results":"BOOL","description":"Requests whether or not the player owns the specified package.","examples":[],"hash":"0xDEF0480B","ns":"CFX","apiset":"server","resultsDescription":"A boolean."},"0xAB09B548":{"name":"FIND_NEXT_PED","params":[{"name":"findHandle","type":"int"},{"name":"outEntity","type":"Entity*"}],"results":"BOOL","description":"","examples":[],"hash":"0xAB09B548","ns":"CFX","apiset":"client","resultsDescription":""},"0x3AC90869":{"name":"DOES_ENTITY_EXIST","params":[{"name":"entity","type":"Object"}],"results":"BOOL","description":"","examples":[],"hash":"0x3AC90869","ns":"CFX","apiset":"server","resultsDescription":""},"0x4E129DBF":{"name":"FIND_NEXT_OBJECT","params":[{"name":"findHandle","type":"int"},{"name":"outEntity","type":"Entity*"}],"results":"BOOL","description":"","examples":[],"hash":"0x4E129DBF","ns":"CFX","apiset":"client","resultsDescription":""},"0x429461C3":{"name":"CAN_PLAYER_START_COMMERCE_SESSION","params":[{"name":"playerSrc","type":"char*","description":"The player handle"}],"results":"BOOL","description":"Returns whether or not the specified player has enough information to start a commerce session for.","examples":[],"hash":"0x429461C3","ns":"CFX","apiset":"server","resultsDescription":"True or false."},"0x6BC189AC":{"name":"EXPERIMENTAL_LOAD_CLONE_SYNC","params":[{"name":"entity","type":"Entity"},{"name":"data","type":"char*"}],"results":"void","description":"This native is not implemented.","examples":[],"hash":"0x6BC189AC","ns":"CFX","apiset":"client"},"0x3BB78F05":{"name":"ENSURE_ENTITY_STATE_BAG","params":[{"name":"entity","type":"Entity"}],"results":"void","description":"Internal function for ensuring an entity has a state bag.","examples":[],"hash":"0x3BB78F05","ns":"CFX","apiset":"server"},"0x8839120D":{"name":"FIND_NEXT_VEHICLE","params":[{"name":"findHandle","type":"int"},{"name":"outEntity","type":"Entity*"}],"results":"BOOL","description":"","examples":[],"hash":"0x8839120D","ns":"CFX","apiset":"client","resultsDescription":""},"0x9615C2AD":{"name":"END_FIND_PED","params":[{"name":"findHandle","type":"int"}],"results":"void","description":"","examples":[],"hash":"0x9615C2AD","ns":"CFX","apiset":"client"},"0xBA0613E1":{"name":"DROP_PLAYER","params":[{"name":"playerSrc","type":"char*"},{"name":"reason","type":"char*"}],"results":"void","description":"","examples":[],"hash":"0xBA0613E1","ns":"CFX","apiset":"server"},"0xDEDA4E50":{"name":"END_FIND_OBJECT","params":[{"name":"findHandle","type":"int"}],"results":"void","description":"","examples":[],"hash":"0xDEDA4E50","ns":"CFX","apiset":"client"},"0xFEC3766D":{"name":"CREATE_RUNTIME_TEXTURE","params":[{"name":"txd","type":"long","description":"A handle to the runtime TXD to create the runtime texture in."},{"name":"txn","type":"char*","description":"The name for the texture in the runtime texture dictionary."},{"name":"width","type":"int","description":"The width of the new texture."},{"name":"height","type":"int","description":"The height of the new texture."}],"results":"long","description":"Creates a blank runtime texture.","examples":[],"hash":"0xFEC3766D","ns":"CFX","apiset":"client","resultsDescription":"A runtime texture handle."},"0xE6E16170":{"name":"FORCE_SNOW_PASS","params":[{"name":"enabled","type":"BOOL","description":"Whether or not to force rendering to use a snow pass."}],"results":"void","description":"Forces the game snow pass to render.","examples":[],"hash":"0xE6E16170","ns":"CFX","apiset":"client","game":"gta5"},"0xCF143FB9":{"name":"GET_ACTIVE_PLAYERS","params":[],"results":"object","description":"Returns all player indices for 'active' physical players known to the client.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```","examples":[],"hash":"0xCF143FB9","ns":"CFX","apiset":"client","resultsDescription":"An object containing a list of player indices."},"0x3FF9D340":{"name":"FIND_FIRST_PICKUP","params":[{"name":"outEntity","type":"Entity*"}],"results":"int","description":"","examples":[],"hash":"0x3FF9D340","ns":"CFX","apiset":"client","resultsDescription":""},"0x237613B3":{"name":"DOOR_SYSTEM_GET_SIZE","params":[],"results":"int","description":"","examples":[],"hash":"0x237613B3","ns":"CFX","apiset":"client","resultsDescription":"The number of doors registered in the system"},"0x9D65CAD2":{"name":"EXPERIMENTAL_SAVE_CLONE_CREATE","params":[{"name":"entity","type":"Entity"}],"results":"char*","description":"This native is not implemented.","examples":[],"hash":"0x9D65CAD2","ns":"CFX","apiset":"client","resultsDescription":""},"0xB1BD08D":{"name":"GET_ENTITY_TYPE","params":[{"name":"entity","type":"Entity"}],"results":"int","description":"","examples":[],"hash":"0xB1BD08D","ns":"CFX","apiset":"server","resultsDescription":""},"0x332169F5":{"name":"GET_ALL_VEHICLES","params":[],"results":"object","description":"Returns all vehicle handles known to the server.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```","examples":[],"hash":"0x332169F5","ns":"CFX","apiset":"server","resultsDescription":"An object containing a list of vehicle handles."},"0x6886C3FE":{"name":"GET_ALL_OBJECTS","params":[],"results":"object","description":"Returns all object handles known to the server.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```","examples":[],"hash":"0x6886C3FE","ns":"CFX","apiset":"server","resultsDescription":"An object containing a list of object handles."},"0xB8584FEF":{"name":"GET_ALL_PEDS","params":[],"results":"object","description":"Returns all peds handles known to the server.\r\nThe data returned adheres to the following layout:\n\n```\n[127, 42, 13, 37]\n```","examples":[],"hash":"0xB8584FEF","ns":"CFX","apiset":"server","resultsDescription":"An object containing a list of peds handles."},"0xB550232D":{"name":"GET_AMBIENT_PED_RANGE_MULTIPLIER","params":[],"results":"float","description":"A getter for [SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME](#\\_0x0B919E1FB47CC4E0).","examples":[],"hash":"0xB550232D","ns":"CFX","apiset":"client","game":"gta5","resultsDescription":"Returns ambient ped range multiplier value."},"0xE5E9EBBB":{"name":"GET_CURRENT_RESOURCE_NAME","params":[],"results":"char*","description":"Returns the name of the currently executing resource.","examples":[],"hash":"0xE5E9EBBB","ns":"CFX","apiset":"shared","resultsDescription":"The name of the resource."},"0x935C0AB2":{"name":"GET_CONVAR_INT","params":[{"name":"varName","type":"char*"},{"name":"default_","type":"int"}],"results":"int","description":"","examples":[],"hash":"0x935C0AB2","ns":"CFX","apiset":"shared","resultsDescription":""},"0x6CCD2564":{"name":"GET_CONVAR","params":[{"name":"varName","type":"char*"},{"name":"default_","type":"char*"}],"results":"char*","description":"","examples":[],"hash":"0x6CCD2564","ns":"CFX","apiset":"shared","resultsDescription":""},"0x8FF45B04":{"name":"GET_ENTITY_ROTATION","params":[{"name":"entity","type":"Entity"}],"results":"Vector3","description":"","examples":[],"hash":"0x8FF45B04","ns":"CFX","apiset":"server","resultsDescription":""},"0x972CC383":{"name":"GET_ENTITY_HEADING","params":[{"name":"entity","type":"Entity"}],"results":"float","description":"","examples":[],"hash":"0x972CC383","ns":"CFX","apiset":"server","resultsDescription":""},"0xC14C9B6B":{"name":"GET_ENTITY_VELOCITY","params":[{"name":"entity","type":"Entity"}],"results":"Vector3","description":"","examples":[],"hash":"0xC14C9B6B","ns":"CFX","apiset":"server","resultsDescription":""},"0xB7F70784":{"name":"GET_ENTITY_SCRIPT","params":[{"name":"entity","type":"Entity"}],"results":"char*","description":"","examples":[],"hash":"0xB7F70784","ns":"CFX","apiset":"server","resultsDescription":""},"0x9BF8A73F":{"name":"GET_ENTITY_ROTATION_VELOCITY","params":[{"name":"entity","type":"Entity"}],"results":"Vector3","description":"","examples":[],"hash":"0x9BF8A73F","ns":"CFX","apiset":"server","resultsDescription":""},"0xE57429FA":{"name":"GET_CONSOLE_BUFFER","params":[],"results":"char*","description":"Returns the current console output buffer.","examples":[],"hash":"0xE57429FA","ns":"CFX","apiset":"server","resultsDescription":"The most recent game console output, as a string."},"0x5F70F5A3":{"name":"GET_HOST_ID","params":[],"results":"char*","description":"","examples":[],"hash":"0x5F70F5A3","ns":"CFX","apiset":"server","resultsDescription":""},"0x1655D41D":{"name":"GET_DUI_HANDLE","params":[{"name":"duiObject","type":"long","description":"The DUI browser handle."}],"results":"char*","description":"Returns the NUI window handle for a specified DUI browser object.","examples":[],"hash":"0x1655D41D","ns":"CFX","apiset":"client","resultsDescription":"The NUI window handle, for use in e.g. CREATE_RUNTIME_TEXTURE_FROM_DUI_HANDLE."},"0x98EFF6F1":{"name":"GET_HASH_KEY","params":[{"name":"model","type":"char*"}],"results":"Hash","description":"This native converts the passed string to a hash.","examples":[],"hash":"0x98EFF6F1","ns":"CFX","apiset":"server","resultsDescription":""},"0x8E3222B7":{"name":"GET_ENTITY_HEALTH","params":[{"name":"entity","type":"Entity"}],"results":"int","description":"Currently it only works with peds.","examples":[],"hash":"0x8E3222B7","ns":"CFX","apiset":"server","resultsDescription":""},"0x13B6855D":{"name":"FLAG_SERVER_AS_PRIVATE","params":[{"name":"private_","type":"BOOL"}],"results":"void","description":"","examples":[],"hash":"0x13B6855D","ns":"CFX","apiset":"server"},"0xA4EA0691":{"name":"GET_GAME_TIMER","params":[],"results":"long","description":"Gets the current game timer in milliseconds.","examples":[],"hash":"0xA4EA0691","ns":"CFX","apiset":"server","resultsDescription":"The game time."},"0xF772BB2C":{"name":"GET_INTERIOR_PORTAL_CORNER_POSITION","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"portalIndex","type":"int","description":"Interior portal index."},{"name":"cornerIndex","type":"int","description":"Portal's corner index."},{"name":"posX","type":"float*"},{"name":"posY","type":"float*"},{"name":"posZ","type":"float*"}],"results":"void","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalIndex = 0\r\n  local cornerIndex = 0\r\n\r\n  local x, y, z = GetInteriorPortalCornerPosition(interiorId, portalIndex, cornerIndex)\r\n  print(\"position of portal \" .. portalIndex .. \"corner index \" .. cornerIndex .. \" is: \" .. vec(x, y, z))\r\nend"}],"hash":"0xF772BB2C","ns":"CFX","apiset":"client","resultsDescription":"Portal corner position."},"0xDAFCB3EC":{"name":"GET_ENTITY_MODEL","params":[{"name":"entity","type":"Entity"}],"results":"Hash","description":"","examples":[],"hash":"0xDAFCB3EC","ns":"CFX","apiset":"server","resultsDescription":""},"0x322B1192":{"name":"GET_INTERIOR_ENTITIES_EXTENTS","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"bbMinX","type":"float*"},{"name":"bbMinY","type":"float*"},{"name":"bbMinZ","type":"float*"},{"name":"bbMaxX","type":"float*"},{"name":"bbMaxY","type":"float*"},{"name":"bbMaxZ","type":"float*"}],"results":"void","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local minX, minY, minZ, maxX, maxY, maxZ = GetInteriorEntitiesExtents(interiorId, roomId)\r\n  print(\"current entities extents is: \" .. vec(minX, minY, minZ) ..\" / \" .. vec(maxX, maxY, maxZ))\r\nend"}],"hash":"0x322B1192","ns":"CFX","apiset":"client","resultsDescription":"Interior entities extents."},"0xB3210203":{"name":"END_FIND_KVP","params":[{"name":"handle","type":"int"}],"results":"void","description":"","examples":[],"hash":"0xB3210203","ns":"CFX","apiset":"shared"},"0xC7AE6AA1":{"name":"GET_ENTITY_MAX_HEALTH","params":[{"name":"entity","type":"Entity"}],"results":"int","description":"Currently it only works with peds.","examples":[],"hash":"0xC7AE6AA1","ns":"CFX","apiset":"server","resultsDescription":""},"0x8F57A89D":{"name":"GET_CAM_MATRIX","params":[{"name":"camera","type":"Cam"},{"name":"rightVector","type":"Vector3*"},{"name":"forwardVector","type":"Vector3*"},{"name":"upVector","type":"Vector3*"},{"name":"position","type":"Vector3*"}],"results":"void","description":"Returns the world matrix of the specified camera. To turn this into a view matrix, calculate the inverse.","examples":[],"hash":"0x8F57A89D","ns":"CFX","apiset":"client"},"0x3F47F0E8":{"name":"GET_INTERIOR_PORTAL_ROOM_TO","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"portalIndex","type":"int","description":"Interior portal index."}],"results":"int","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local roomIndex = 0\r\n\r\n  local portalRoomTo = GetInteriorPortalRoomTo(interiorId, 0)\r\n  print(\"portal \" .. roomIndex .. \" room TO is: \" .. portalRoomTo)\r\nend"}],"hash":"0x3F47F0E8","ns":"CFX","apiset":"client","resultsDescription":"Portal's room TO index."},"0x62FC38D0":{"name":"GET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE","params":[{"name":"playerSrc","type":"char*","description":"The player handle"}],"results":"float","description":"","examples":[],"hash":"0x62FC38D0","ns":"CFX","apiset":"server","resultsDescription":""},"0xEA11BFBA":{"name":"GET_CURRENT_SERVER_ENDPOINT","params":[],"results":"char*","description":"Returns the peer address of the remote game server that the user is currently connected to.","examples":[],"hash":"0xEA11BFBA","ns":"CFX","apiset":"client","resultsDescription":"The peer address of the game server (e.g. `127.0.0.1:30120`), or NULL if not available."},"0xF65BBA4B":{"name":"DOOR_SYSTEM_GET_ACTIVE","params":[],"results":"object","description":"Returns a list of door system entries: a door system hash (see [ADD_DOOR_TO_SYSTEM](#\\_0x6F8838D03D1DC226)) and its object handle.\n\nThe data returned adheres to the following layout:\n\n```\n[{doorHash1, doorHandle1}, ..., {doorHashN, doorHandleN}]\n```","examples":[],"hash":"0xF65BBA4B","ns":"CFX","apiset":"client","resultsDescription":"An object containing a list of door system entries."},"0x77A435B0":{"name":"GET_INTERIOR_POSITION","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"posX","type":"float*"},{"name":"posY","type":"float*"},{"name":"posZ","type":"float*"}],"results":"void","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local x, y, z = GetInteriorPosition(interiorId)\r\n  print(\"current interior \" .. interiorId .. \" position is: \" .. vec(x, y, z))\r\nend"}],"hash":"0x77A435B0","ns":"CFX","apiset":"client","resultsDescription":"Interior position."},"0xAA9C141D":{"name":"GET_INTERIOR_PORTAL_ROOM_FROM","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"portalIndex","type":"int","description":"Interior portal index."}],"results":"int","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local roomIndex = 0\r\n\r\n  local portalRoomFrom = GetInteriorPortalRoomFrom(interiorId, 0)\r\n  print(\"portal \" .. roomIndex .. \" room FROM is: \" .. portalRoomFrom)\r\nend"}],"hash":"0xAA9C141D","ns":"CFX","apiset":"client","resultsDescription":"Portal's room FROM index."},"0x6B7AF743":{"name":"GET_INTERIOR_ROOM_FLAG","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"roomIndex","type":"int","description":"Interior room index."}],"results":"int","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local roomFlag = GetInteriorRoomFlag(interiorId, roomId)\r\n  print(\"current room flag is: \" .. roomFlag)\r\nend"}],"hash":"0x6B7AF743","ns":"CFX","apiset":"client","resultsDescription":"Room's flag."},"0xD05BB8B1":{"name":"GET_INTERIOR_PORTAL_COUNT","params":[{"name":"interiorId","type":"int","description":"The target interior."}],"results":"int","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorPortalCount(interiorId)\r\n  print(\"interior \" .. interiorId .. \"has \" .. count .. \" portals\")\r\nend"}],"hash":"0xD05BB8B1","ns":"CFX","apiset":"client","resultsDescription":"The amount of portals in interior."},"0xA2737C2C":{"name":"GET_INTERIOR_ROOM_COUNT","params":[{"name":"interiorId","type":"int","description":"The target interior."}],"results":"int","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local count = GetInteriorRoomCount(interiorId)\r\n  print(\"interior \" .. interiorId .. \"has \" .. count .. \" rooms\")\r\nend"}],"hash":"0xA2737C2C","ns":"CFX","apiset":"client","resultsDescription":"The amount of rooms in interior."},"0x9F1C4383":{"name":"GET_INSTANCE_ID","params":[],"results":"int","description":"","examples":[],"hash":"0x9F1C4383","ns":"CFX","apiset":"shared","resultsDescription":""},"0x5A039998":{"name":"GET_INTERIOR_ROTATION","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"rotx","type":"float*"},{"name":"rotY","type":"float*"},{"name":"rotZ","type":"float*"},{"name":"rotW","type":"float*"}],"results":"void","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local x, y, z, w = GetInteriorRotation(interiorId)\r\n  print(\"current interior \" .. interiorId .. \" rotation is: \" .. vec(x, y, z, w))\r\nend"}],"hash":"0x5A039998","ns":"CFX","apiset":"client","resultsDescription":"Interior rotation in quaternion."},"0xF9E795DD":{"name":"GET_INTERIOR_ROOM_EXTENTS","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"roomIndex","type":"int","description":"Interior room index."},{"name":"bbMinX","type":"float*"},{"name":"bbMinY","type":"float*"},{"name":"bbMinZ","type":"float*"},{"name":"bbMaxX","type":"float*"},{"name":"bbMaxY","type":"float*"},{"name":"bbMaxZ","type":"float*"}],"results":"void","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local minX, minY, minZ, maxX, maxY, maxZ = GetInteriorRoomExtents(interiorId, roomId)\r\n  print(\"current room extents is: \" .. vec(minX, minY, minZ) ..\" / \" .. vec(maxX, maxY, maxZ))\r\nend"}],"hash":"0xF9E795DD","ns":"CFX","apiset":"client","resultsDescription":"Room extents."},"0xC74DA47C":{"name":"GET_INTERIOR_PORTAL_FLAG","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"portalIndex","type":"int","description":"Interior portal index."}],"results":"int","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalFlag = GetInteriorPortalFlag(interiorId, 0)\r\n  print(\"portal 0 flag is: \" .. portalRoomFrom)\r\nend"}],"hash":"0xC74DA47C","ns":"CFX","apiset":"client","resultsDescription":"Portal's flag."},"0x11755DF2":{"name":"GET_INTERIOR_ROOM_NAME","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"roomIndex","type":"int","description":"Interior room index."}],"results":"char*","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local roomName = GetInteriorRoomName(interiorId, roomId)\r\n  print(\"current room name is: \" .. roomName)\r\nend"}],"hash":"0x11755DF2","ns":"CFX","apiset":"client","resultsDescription":"Room's name."},"0x1647F1CB":{"name":"GET_ENTITY_COORDS","params":[{"name":"entity","type":"Entity","description":"The entity to get the coordinates from."}],"results":"Vector3","description":"Gets the current coordinates for a specified entity. This native is used server side when using OneSync. See <a href=\"#_0x3FEF770D40960D5A\" >GET_ENTITY_COORDS</a> for client side.","examples":[{"lang":"lua","code":"local function ShowCoordinates()\r\n    local player = source\r\n    local ped = GetPlayerPed(player)\r\n    local playerCoords = GetEntityCoords(ped)\r\n\r\n    print(playerCoords) -- vector3(...)\r\nend\r\n\r\nRegisterNetEvent(\"myCoordinates\")\r\nAddEventHandler(\"myCoordinates\", ShowCoordinates)"},{"lang":"js","code":"onNet('myCoordinates', () => {\r\n  const player = global.source; // use (global as any).source for Typescript\r\n  const ped = GetPlayerPed(player);\r\n  const [playerX, playerY, playerZ] = GetEntityCoords(ped);\r\n\r\n  console.log(`${playerX}, ${playerY}, ${playerZ}`);\r\n});"},{"lang":"cs","code":"using static CitizenFX.Core.Native.API;\r\n// ...\r\n\r\n// In class constructor\r\nEventHandlers[\"myCoordinates\"] += new Action<Player>(ShowCoordinates);\r\n\r\n// Delegate method\r\nprivate void ShowCoordinates([FromSource]Player player) {\r\n    Vector3 playerCoords = GetEntityCoords(player.Character);\r\n\r\n    // or the preferred use of C# wrapper\r\n    Vector3 playerCoords = player.Character.Position;\r\n\r\n    Debug.WriteLine($\"{playerCoords}\");\r\n}\r\n"}],"hash":"0x1647F1CB","ns":"CFX","apiset":"server","resultsDescription":"The current entity coordinates."},"0x667EC929":{"name":"GET_AMBIENT_VEHICLE_RANGE_MULTIPLIER","params":[],"results":"float","description":"A getter for [SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME](#\\_0x90B6DA738A9A25DA).","examples":[],"hash":"0x667EC929","ns":"CFX","apiset":"client","game":"gta5","resultsDescription":"Returns ambient vehicle range multiplier value."},"0x2B9D4F50":{"name":"GET_GAME_POOL","params":[{"name":"poolname","type":"char*"}],"results":"object","description":"Returns all pool handles for the given pool name; the data returned adheres to the following layout:\n\n```\n[ 770, 1026, 1282, 1538, 1794, 2050, 2306, 2562, 2818, 3074, 3330, 3586, 3842, 4098, 4354, 4610, ...]\n```\n\n### Supported Pools\n\n**1**: CPed\\\n**2**: CObject\\\n**3**: CVehicle\\\n**4**: CPickup","examples":[],"hash":"0x2B9D4F50","ns":"CFX","apiset":"client","resultsDescription":"An object containing a list of all pool handles"},"0x82BA3F88":{"name":"GET_INTERIOR_ROOM_TIMECYCLE","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"roomIndex","type":"int","description":"Interior room index."}],"results":"int","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local roomTimecycle = GetInteriorRoomTimecycle(interiorId, roomId)\r\n  print(\"current room timecycle hash is: \" .. roomTimecycle)\r\nend"}],"hash":"0x82BA3F88","ns":"CFX","apiset":"client","resultsDescription":"Room's timecycle hash."},"0x4D52FE5B":{"name":"GET_INVOKING_RESOURCE","params":[],"results":"char*","description":"","examples":[],"hash":"0x4D52FE5B","ns":"CFX","apiset":"shared","resultsDescription":""},"0xE0EE05F8":{"name":"GET_INTERIOR_ROOM_INDEX_BY_HASH","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"roomHash","type":"int","description":"Interior room hash."}],"results":"int","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  print(\"current room index is: \" .. roomId)\r\nend"}],"hash":"0xE0EE05F8","ns":"CFX","apiset":"client","resultsDescription":"Room index, -1 if failed."},"0xFC30DDFF":{"name":"GET_ENTITY_POPULATION_TYPE","params":[{"name":"entity","type":"Entity","description":"the entity to obtain the population type from"}],"results":"int","description":"This native gets an entity's population type.","examples":[],"hash":"0xFC30DDFF","ns":"CFX","apiset":"server","resultsDescription":"Returns the population type ID, defined by the below enumeration:```cpp\nenum ePopulationType\r\n{\r\n\tPOPTYPE_UNKNOWN = 0,\r\n\tPOPTYPE_RANDOM_PERMANENT,\r\n\tPOPTYPE_RANDOM_PARKED,\r\n\tPOPTYPE_RANDOM_PATROL,\r\n\tPOPTYPE_RANDOM_SCENARIO,\r\n\tPOPTYPE_RANDOM_AMBIENT,\r\n\tPOPTYPE_PERMANENT,\r\n\tPOPTYPE_MISSION,\r\n\tPOPTYPE_REPLAY,\r\n\tPOPTYPE_CACHE,\r\n\tPOPTYPE_TOOL\r\n};\n```"},"0x1363A998":{"name":"GET_MAP_ZOOM_DATA_LEVEL","params":[{"name":"index","type":"int","description":"Zoom level index."},{"name":"zoomScale","type":"float*","description":"fZoomScale value."},{"name":"zoomSpeed","type":"float*","description":"fZoomSpeed value."},{"name":"scrollSpeed","type":"float*","description":"fScrollSpeed value."},{"name":"tilesX","type":"float*","description":"vTiles X."},{"name":"tilesY","type":"float*","description":"vTiles Y."}],"results":"BOOL","description":"Returns the zoom level data by index from mapzoomdata.meta file.","examples":[],"hash":"0x1363A998","ns":"CFX","apiset":"client","resultsDescription":"A boolean indicating TRUE if the data was received successfully."},"0xFF7F66AB":{"name":"GET_NUM_PLAYER_IDENTIFIERS","params":[{"name":"playerSrc","type":"char*"}],"results":"int","description":"","examples":[],"hash":"0xFF7F66AB","ns":"CFX","apiset":"server","resultsDescription":""},"0x288AD228":{"name":"GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM","params":[{"name":"vehicle","type":"Vehicle"}],"results":"BOOL","description":"","examples":[],"hash":"0x288AD228","ns":"CFX","apiset":"server","resultsDescription":""},"0xD7EC8760":{"name":"GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM","params":[{"name":"vehicle","type":"Vehicle"}],"results":"BOOL","description":"","examples":[],"hash":"0xD7EC8760","ns":"CFX","apiset":"server","resultsDescription":""},"0x863F27B":{"name":"GET_NUM_RESOURCES","params":[],"results":"int","description":"","examples":[],"hash":"0x863F27B","ns":"CFX","apiset":"shared","resultsDescription":""},"0x7DC6D022":{"name":"GET_IS_VEHICLE_ENGINE_RUNNING","params":[{"name":"vehicle","type":"Vehicle"}],"results":"BOOL","description":"","examples":[],"hash":"0x7DC6D022","ns":"CFX","apiset":"server","resultsDescription":""},"0x776E864":{"name":"GET_NUM_RESOURCE_METADATA","params":[{"name":"resourceName","type":"char*","description":"The resource name."},{"name":"metadataKey","type":"char*","description":"The key to look up in the resource manifest."}],"results":"int","description":"Gets the amount of metadata values with the specified key existing in the specified resource's manifest.\r\nSee also: [Resource manifest](https://docs.fivem.net/resources/manifest/)","examples":[],"hash":"0x776E864","ns":"CFX","apiset":"shared","resultsDescription":""},"0x63D13184":{"name":"GET_NUM_PLAYER_INDICES","params":[],"results":"int","description":"","examples":[],"hash":"0x63D13184","ns":"CFX","apiset":"server","resultsDescription":""},"0xFF72DF84":{"name":"GET_PARKED_VEHICLE_DENSITY_MULTIPLIER","params":[],"results":"float","description":"A getter for [SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0xEAE6DCC7EEE3DB1D).","examples":[],"hash":"0xFF72DF84","ns":"CFX","apiset":"client","game":"gta5","resultsDescription":"Returns parked vehicle density multiplier value."},"0x63458C27":{"name":"GET_PED_CAUSE_OF_DEATH","params":[{"name":"ped","type":"Ped"}],"results":"Hash","description":"","examples":[],"hash":"0x63458C27","ns":"CFX","apiset":"server","resultsDescription":""},"0xF5A904F9":{"name":"GET_PED_DENSITY_MULTIPLIER","params":[],"results":"float","description":"A getter for [SET_PED_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0x95E3D6257B166CF2).","examples":[],"hash":"0xF5A904F9","ns":"CFX","apiset":"client","game":"gta5","resultsDescription":"Returns ped density multiplier value."},"0x23473EA4":{"name":"GET_PASSWORD_HASH","params":[{"name":"password","type":"char*"}],"results":"char*","description":"","examples":[],"hash":"0x23473EA4","ns":"CFX","apiset":"server","resultsDescription":""},"0xA47B860F":{"name":"GET_PED_EYE_COLOR","params":[{"name":"ped","type":"Ped","description":"The target ped"}],"results":"int","description":"A getter for [\\_SET_PED_EYE_COLOR](#\\_0x50B56988B170AFDF). Returns -1 if fails to get.","examples":[{"lang":"lua","code":"local pedEyeColour = GetPedEyeColor(PlayerPedId())\r\nif pedEyeColour == 7 then\r\n  print(\"Gray eyes!\")\r\nend"}],"hash":"0xA47B860F","ns":"CFX","apiset":"client","resultsDescription":"Returns ped's eye colour, or -1 if fails to get."},"0xC182F76E":{"name":"GET_PED_DESIRED_HEADING","params":[{"name":"ped","type":"Ped","description":"The target ped"}],"results":"float","description":"","examples":[],"hash":"0xC182F76E","ns":"CFX","apiset":"server","resultsDescription":"Returns ped's desired heading."},"0xA3EA2893":{"name":"GET_PED_HAIR_COLOR","params":[{"name":"ped","type":"Ped","description":"The target ped"}],"results":"int","description":"A getter for [\\_SET_PED_HAIR_COLOR](#\\_0x4CFFC65454C93A49). Returns -1 if fails to get.","examples":[{"lang":"lua","code":"local primaryColour = GetPedHairColor(PlayerPedId())\r\nif primaryColour == 18 then\r\n  print(\"You have red hair!\")\r\nend"}],"hash":"0xA3EA2893","ns":"CFX","apiset":"client","resultsDescription":"Returns ped's primary hair colour."},"0xBA352ADD":{"name":"GET_PED_FACE_FEATURE","params":[{"name":"ped","type":"Ped","description":"The target ped"},{"name":"index","type":"int","description":"Face feature index"}],"results":"float","description":"A getter for [\\_SET_PED_FACE_FEATURE](#\\_0x71A5C1DBA060049E). Returns 0.0 if fails to get.","examples":[{"lang":"lua","code":"local noseWidth = GetPedFaceFeature(PlayerPedId(), 0)\r\nif noseWidth == 1.0 then\r\n  print(\"You have big nose!\")\r\nend"}],"hash":"0xBA352ADD","ns":"CFX","apiset":"client","resultsDescription":"Returns ped's face feature value, or 0.0 if fails to get."},"0xC46EE605":{"name":"GET_PED_HEAD_OVERLAY_DATA","params":[{"name":"ped","type":"Ped","description":"The target ped"},{"name":"index","type":"int","description":"Overlay index"},{"name":"overlayValue","type":"int*","description":"Overlay value pointer"},{"name":"colourType","type":"int*","description":"Colour type pointer"},{"name":"firstColour","type":"int*","description":"First colour pointer"},{"name":"secondColour","type":"int*","description":"Second colour pointer"},{"name":"overlayOpacity","type":"float*","description":"Opacity pointer"}],"results":"BOOL","description":"A getter for [SET_PED_HEAD_OVERLAY](#\\_0x48F44967FA05CC1E) and [\\_SET_PED_HEAD_OVERLAY_COLOR](#\\_0x497BF74A7B9CB952) natives.","examples":[{"lang":"lua","code":"-- getting beard overlay data\r\nlocal success, overlayValue, colourType, firstColour, secondColour, overlayOpacity = GetPedHeadOverlayData(PlayerPedId(), 1)\r\nif success then\r\n  -- incrementing value\r\n  SetPedHeadOverlay(PlayerPedId(), 1, overlayValue + 1, overlayOpacity)\r\nend"}],"has":"0xC46EE605","ns":"CFX","apiset":"client","resultsDescription":"Returns ped's head overlay data."},"0xFEE404F9":{"name":"GET_PLAYER_ENDPOINT","params":[{"name":"playerSrc","type":"char*"}],"results":"char*","description":"","examples":[],"hash":"0xFEE404F9","ns":"CFX","apiset":"server","resultsDescription":""},"0xC8A9CE08":{"name":"GET_PLAYER_FROM_INDEX","params":[{"name":"index","type":"int"}],"results":"char*","description":"","examples":[],"hash":"0xC8A9CE08","ns":"CFX","apiset":"server","resultsDescription":""},"0x7302DBCF":{"name":"GET_PLAYER_IDENTIFIER","params":[{"name":"playerSrc","type":"char*"},{"name":"identifier","type":"int"}],"results":"char*","description":"","examples":[],"hash":"0x7302DBCF","ns":"CFX","apiset":"server","resultsDescription":""},"0x680C90EE":{"name":"GET_PLAYER_INVINCIBLE","params":[{"name":"playerSrc","type":"char*","description":"The player handle"}],"results":"BOOL","description":"","examples":[],"hash":"0x680C90EE","ns":"CFX","apiset":"server","resultsDescription":"A boolean to tell if the player is invincible."},"0x2A50657":{"name":"GET_PLAYER_MAX_ARMOUR","params":[{"name":"playerSrc","type":"char*","description":"The player handle"}],"results":"int","description":"","examples":[],"hash":"0x2A50657","ns":"CFX","apiset":"server","resultsDescription":""},"0x8154E470":{"name":"GET_PLAYER_MAX_HEALTH","params":[{"name":"playerSrc","type":"char*","description":"The player handle"}],"results":"int","description":"","examples":[],"hash":"0x8154E470","ns":"CFX","apiset":"server","resultsDescription":""},"0x406B4B20":{"name":"GET_PLAYER_NAME","params":[{"name":"playerSrc","type":"char*"}],"results":"char*","description":"","examples":[],"hash":"0x406B4B20","ns":"CFX","apiset":"server","resultsDescription":""},"0xFF1290D4":{"name":"GET_PLAYER_PING","params":[{"name":"playerSrc","type":"char*"}],"results":"int","description":"","examples":[],"hash":"0xFF1290D4","ns":"CFX","apiset":"server","resultsDescription":""},"0xCA0A085F":{"name":"GET_RUNTIME_TEXTURE_PITCH","params":[{"name":"tex","type":"long","description":"A handle to the runtime texture."}],"results":"int","description":"Gets the row pitch of the specified runtime texture, for use when creating data for `SET_RUNTIME_TEXTURE_ARGB_DATA`.","examples":[],"hash":"0xCA0A085F","ns":"CFX","apiset":"client","resultsDescription":"The row pitch in bytes."},"0x5240DA5A":{"name":"GET_RESOURCE_KVP_STRING","params":[{"name":"key","type":"char*"}],"results":"char*","description":"","examples":[],"hash":"0x5240DA5A","ns":"CFX","apiset":"shared","resultsDescription":""},"0x9873E404":{"name":"GET_PLAYER_TEAM","params":[{"name":"playerSrc","type":"char*","description":"The player handle"}],"results":"int","description":"","examples":[],"hash":"0x9873E404","ns":"CFX","apiset":"server","resultsDescription":""},"0x78F27B1F":{"name":"GET_PLAYER_VEHICLE_DAMAGE_MODIFIER","params":[{"name":"playerId","type":"Player","description":"The player index."}],"results":"float","description":"A getter for [SET_PLAYER_VEHICLE_DAMAGE_MODIFIER](#\\_0xA50E117CDDF82F0C).","examples":[],"hash":"0x78F27B1F","ns":"CFX","apiset":"client","game":"gta5","resultsDescription":"The value of player vehicle damage modifier."},"0x387246B7":{"name":"GET_RESOURCE_BY_FIND_INDEX","params":[{"name":"findIndex","type":"int","description":"The index of the resource (starting at 0)"}],"results":"char*","description":"","examples":[{"lang":"lua","code":"local resourceList = {}\r\nfor i = 0, GetNumResources(), 1 do\r\n  local resource_name = GetResourceByFindIndex(i)\r\n  if resource_name and GeesourceState(resource_name) == \"started\" then\r\n    table.insert(resourceList, resource_name)\r\n  end\r\nend\r\nprint(table.unpack(resourceList))"}],"hash":"0x387246B7","ns":"CFX","apiset":"shared","resultsDescription":"The resource name as a `string`"},"0xBDCDD163":{"name":"GET_PLAYER_WANTED_LEVEL","params":[{"name":"playerSrc","type":"char*","description":"The target player"}],"results":"int","description":"```\nReturns given players wanted level server-side.\n```","examples":[],"hash":"0xBDCDD163","ns":"CFX","apiset":"server","resultsDescription":"The wanted level"},"0x8326E7CD":{"name":"GET_PLAYER_VEHICLE_DEFENSE_MODIFIER","params":[{"name":"playerId","type":"Player","description":"The player index."}],"results":"float","description":"A getter for [SET_PLAYER_VEHICLE_DEFENSE_MODIFIER](#\\_0x4C60E6EFDAFF2462).","examples":[],"hash":"0x8326E7CD","ns":"CFX","apiset":"client","game":"gta5","resultsDescription":"The value of player vehicle defense modifier."},"0xF1543251":{"name":"GET_PLAYER_WEAPON_DEFENSE_MODIFIER","params":[{"name":"playerId","type":"Player","description":"The player index."}],"results":"float","description":"A getter for [SET_PLAYER_WEAPON_DEFENSE_MODIFIER](#\\_0x2D83BC011CA14A3C).","examples":[],"hash":"0xF1543251","ns":"CFX","apiset":"shared","game":"gta5","resultsDescription":"The value of player weapon defense modifier."},"0x2A3D7CDA":{"name":"GET_PLAYER_WEAPON_DAMAGE_MODIFIER","params":[{"name":"playerId","type":"Player","description":"The player index."}],"results":"float","description":"A getter for [SET_PLAYER_WEAPON_DAMAGE_MODIFIER](#\\_0xCE07B9F7817AADA3).","examples":[],"hash":"0x2A3D7CDA","ns":"CFX","apiset":"shared","game":"gta5","resultsDescription":"The value of player weapon damage modifier."},"0x27E94EF8":{"name":"GET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER","params":[{"name":"playerId","type":"Player","description":"The player index."}],"results":"float","description":"A getter for [SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER](#\\_0xAE540335B4ABC4E2).","examples":[],"hash":"0x27E94EF8","ns":"CFX","apiset":"client","game":"gta5","resultsDescription":"The value of player melee weapon defense modifier."},"0xD4BEF069":{"name":"GET_REGISTERED_COMMANDS","params":[],"results":"object","description":"Returns all commands that are registered in the command system.\r\nThe data returned adheres to the following layout:\n\n```\n[\r\n{\r\n\"name\": \"cmdlist\"\r\n},\r\n{\r\n\"name\": \"command1\"\r\n}\r\n]\n```","examples":[],"hash":"0xD4BEF069","ns":"CFX","apiset":"shared","resultsDescription":"An object containing registered commands."},"0x986B65FF":{"name":"GET_PLAYER_WEAPON_DEFENSE_MODIFIER_2","params":[{"name":"playerId","type":"Player","description":"The player index."}],"results":"float","description":"A getter for [\\_SET_PLAYER_WEAPON_DEFENSE_MODIFIER\\_2](#\\_0xBCFDE9EDE4CF27DC).","examples":[],"hash":"0x986B65FF","ns":"CFX","apiset":"shared","game":"gta5","resultsDescription":"The value of player weapon defense modifier 2."},"0xA45B6C8D":{"name":"GET_PED_MAX_HEALTH","params":[{"name":"ped","type":"Ped"}],"results":"int","description":"","examples":[],"hash":"0xA45B6C8D","ns":"CFX","apiset":"server","resultsDescription":""},"0x964BAB1D":{"name":"GET_RESOURCE_METADATA","params":[{"name":"resourceName","type":"char*","description":"The resource name."},{"name":"metadataKey","type":"char*","description":"The key in the resource manifest."},{"name":"index","type":"int","description":"The value index, in a range from \\[0..GET_NUM_RESOURCE_METDATA-1]."}],"results":"char*","description":"Gets metadata value at a specified key/index from a resource's manifest.\r\nSee also: [Resource manifest](https://docs.fivem.net/resources/manifest/)","examples":[],"hash":"0x964BAB1D","ns":"CFX","apiset":"shared","resultsDescription":""},"0x35BDCEEA":{"name":"GET_RESOURCE_KVP_FLOAT","params":[{"name":"key","type":"char*"}],"results":"float","description":"","examples":[],"hash":"0x35BDCEEA","ns":"CFX","apiset":"shared","resultsDescription":""},"0x8689A825":{"name":"GET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER","params":[{"name":"playerId","type":"Player","description":"The player index."}],"results":"float","description":"A getter for [SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER](#\\_0x4A3DC7ECCC321032).","examples":[],"hash":"0x8689A825","ns":"CFX","apiset":"shared","game":"gta5","resultsDescription":"Returns player melee weapon damage modifier value."},"0x61DCF017":{"name":"GET_RESOURCE_PATH","params":[{"name":"resourceName","type":"char*","description":"The name of the resource."}],"results":"char*","description":"Returns the physical on-disk path of the specified resource.","examples":[],"hash":"0x61DCF017","ns":"CFX","apiset":"server","resultsDescription":"The resource directory name, possibly without trailing slash."},"0xFAA6CB5D":{"name":"FIND_FIRST_OBJECT","params":[{"name":"outEntity","type":"Entity*"}],"results":"int","description":"","examples":[],"hash":"0xFAA6CB5D","ns":"CFX","apiset":"client","resultsDescription":""},"0x2CE311A7":{"name":"GET_PED_ARMOUR","params":[{"name":"ped","type":"Ped"}],"results":"int","description":"","examples":[],"hash":"0x2CE311A7","ns":"CFX","apiset":"server","resultsDescription":""},"0x7ADE63E1":{"name":"GET_PLAYER_TIME_IN_PURSUIT","params":[{"name":"playerSrc","type":"char*","description":"The target player"},{"name":"lastPursuit","type":"BOOL","description":"False = CurrentPursuit, True = LastPursuit"}],"results":"int","description":"```\nGets the amount of time player has spent evading the cops.\r\nCounter starts and increments only when cops are chasing the player.\r\nIf the player is evading, the timer will pause.\n```","examples":[],"hash":"0x7ADE63E1","ns":"CFX","apiset":"server","resultsDescription":"Returns -1, if the player is not wanted or wasn't in pursuit before, depending on the lastPursuit parameter\r\nReturns 0, if lastPursuit == False and the player has a wanted level, but the pursuit has not started yet\r\nOtherwise, will return the milliseconds of the pursuit."},"0x3574AACE":{"name":"GET_RUNTIME_TEXTURE_HEIGHT","params":[{"name":"tex","type":"long","description":"A handle to the runtime texture."}],"results":"int","description":"Gets the height of the specified runtime texture.","examples":[],"hash":"0x3574AACE","ns":"CFX","apiset":"client","resultsDescription":"The height in pixels."},"0x427E8E6A":{"name":"GET_PLAYER_LAST_MSG","params":[{"name":"playerSrc","type":"char*"}],"results":"int","description":"","examples":[],"hash":"0x427E8E6A","ns":"CFX","apiset":"server","resultsDescription":""},"0xC9F55558":{"name":"GET_RUNTIME_TEXTURE_WIDTH","params":[{"name":"tex","type":"long","description":"A handle to the runtime texture."}],"results":"int","description":"Gets the width of the specified runtime texture.","examples":[],"hash":"0xC9F55558","ns":"CFX","apiset":"client","resultsDescription":"The width in pixels."},"0x557B586A":{"name":"GET_RESOURCE_KVP_INT","params":[{"name":"key","type":"char*"}],"results":"int","description":"","examples":[],"hash":"0x557B586A","ns":"CFX","apiset":"shared","resultsDescription":""},"0xEF7C6538":{"name":"GET_VEHICLE_DENSITY_MULTIPLIER","pms":[],"results":"float","description":"A getter for [SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0x245A6883D966D537).","examples":[],"hash":"0xEF7C6538","ns":"CFX","apiset":"client","game":"gta5","resultsDescription":"Returns vehicle density multiplier value."},"0xF2E3912B":{"name":"GET_PLAYER_INVINCIBLE_2","params":[{"name":"player","type":"Player","description":"The player id"}],"results":"BOOL","description":"Unlike [GET_PLAYER_INVINCIBLE](#\\_0xB721981B2B939E07) this native gets both [SET_PLAYER_INVINCIBLE_KEEP_RAGDOLL_ENABLED](#\\_0x6BC97F4F4BB3C04B) and [SET_PLAYER_INVINCIBLE](#\\_0x239528EACDC3E7DE) invincibility state.","examples":[],"hash":"0xF2E3912B","ns":"CFX","apiset":"client","resultsDescription":"A boolean to tell if the player is invincible."},"0x6E31E993":{"name":"GET_PLAYER_PED","params":[{"name":"playerSrc","type":"char*"}],"results":"Entity","description":"","examples":[],"hash":"0x6E31E993","ns":"CFX","apiset":"server","resultsDescription":""},"0x637F4C75":{"name":"GET_STATE_BAG_VALUE","params":[{"name":"bagName","type":"char*"},{"name":"key","type":"char*"}],"results":"object","description":"Returns the value of a state bag key.","examples":[],"hash":"0x637F4C75","ns":"CFX","apiset":"shared","resultsDescription":"Value."},"0x77C598B2":{"name":"GET_SCENARIO_PED_DENSITY_MULTIPLIER","params":[],"results":"float","description":"A getter for [SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0x7A556143A1C03898).","examples":[],"hash":"0x77C598B2","ns":"CFX","apiset":"client","game":"gta5","resultsDescription":"Returns scenario ped density multiplier value."},"0x1C2B9FEF":{"name":"GET_VEHICLE_CUSTOM_PRIMARY_COLOUR","params":[{"name":"vehicle","type":"Vehicle"},{"name":"r","type":"int*"},{"name":"g","type":"int*"},{"name":"b","type":"int*"}],"results":"void","description":"","examples":[],"hash":"0x1C2B9FEF","ns":"CFX","apiset":"server","resultsDescription":""},"0x4B087305":{"name":"GET_PED_HAIR_HIGHLIGHT_COLOR","params":[{"name":"ped","type":"Ped","description":"The target ped"}],"results":"int","description":"A getter for [\\_SET_PED_HAIR_COLOR](#\\_0x4CFFC65454C93A49). Returns -1 if fails to get.","examples":[{"lang":"lua","code":"local secondaryColour = GetPedHairHighlightColor(PlayerPedId())\r\nif secondaryColour == 32 then\r\n  print(\"You have pink hair highlight colour!\")\r\nend"}],"hash":"0x4B087305","ns":"CFX","apiset":"client","resultsDescription":"Returns ped's secondary hair colour."},"0xC3C93F28":{"name":"GET_VEHICLE_CHEAT_POWER_INCREASE","params":[{"name":"vehicle","type":"Vehicle","description":"The target vehicle."}],"results":"float","description":"A getter for [SET_VEHICLE_CHEAT_POWER_INCREASE](#\\_0xB59E4BD37AE292DB).","examples":[],"hash":"0xC3C93F28","ns":"CFX","apiset":"client","resultsDescription":"Returns vehicle's cheat power increase modifier value."},"0x2B2FCC28":{"name":"GET_VEHICLE_BODY_HEALTH","params":[{"name":"vehicle","type":"Vehicle"}],"results":"float","description":"","examples":[],"hash":"0x2B2FCC28","ns":"CFX","apiset":"server","resultsDescription":""},"0x1DAD4583":{"name":"GET_VEHICLE_CLUTCH","params":[{"name":"vehicle","type":"Vehicle"}],"results":"float","description":"","examples":[],"hash":"0x1DAD4583","ns":"CFX","apiset":"client","resultsDescription":""},"0x40D82D88":{"name":"GET_VEHICLE_COLOURS","params":[{"name":"vehicle","type":"Vehicle"},{"name":"colorPrimary","type":"int*"},{"name":"colorSecondary","type":"int*"}],"results":"void","description":"","examples":[],"hash":"0x40D82D88","ns":"CFX","apiset":"server","resultsDescription":""},"0xB4F4E566":{me":"GET_VEHICLE_CURRENT_GEAR","params":[{"name":"vehicle","type":"Vehicle"}],"results":"int","description":"","examples":[],"hash":"0xB4F4E566","ns":"CFX","apiset":"client","resultsDescription":""},"0x9AAD420E":{"name":"GET_VEHICLE_DASHBOARD_SPEED","params":[{"name":"vehicle","type":"Vehicle"}],"results":"float","description":"","examples":[],"hash":"0x9AAD420E","ns":"CFX","apiset":"client","resultsDescription":""},"0x3FF247A2":{"name":"GET_VEHICLE_CUSTOM_SECONDARY_COLOUR","params":[{"name":"vehicle","type":"Vehicle"},{"name":"r","type":"int*"},{"name":"g","type":"int*"},{"name":"b","type":"int*"}],"results":"void","description":"","examples":[],"hash":"0x3FF247A2","ns":"CFX","apiset":"server","resultsDescription":""},"0xE015E854":{"name":"GET_TRAIN_CURRENT_TRACK_NODE","params":[{"name":"train","type":"Vehicle","description":"The target train."}],"results":"int","description":"","examples":[],"hash":"0xE015E854","ns":"CFX","apiset":"client","resultsDescription":"Train's current track node index."},"0xEC82A51D":{"name":"GET_VEHICLE_LIVERY","params":[{"name":"vehicle","type":"Vehicle"}],"results":"int","description":"","examples":[],"hash":"0xEC82A51D","ns":"CFX","apiset":"server","resultsDescription":""},"0x6E35C49C":{"name":"GET_VEHICLE_DOOR_STATUS","params":[{"name":"vehicle","type":"Vehicle"}],"results":"int","description":"","examples":[],"hash":"0x6E35C49C","ns":"CFX","apiset":"server","resultsDescription":"A number from 0 to 7."},"0x7B0D00C5":{"name":"GET_RANDOM_VEHICLE_DENSITY_MULTIPLIER","params":[],"results":"float","description":"A getter for [SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME](#\\_0xB3B3359379FE77D3).\r\nSame as vehicle density multiplier.","examples":[],"hash":"0x7B0D00C5","ns":"CFX","apiset":"client","game":"gta5","resultsDescription":"Returns random vehicle density multiplier value."},"0x83070354":{"name":"GET_VEHICLE_INDICATOR_LIGHTS","params":[{"name":"vehicle","type":"Vehicle"}],"results":"int","description":"Gets the vehicle indicator light state. 0 = off, 1 = left, 2 = right, 3 = both","examples":[],"hash":"0x83070354","ns":"CFX","apiset":"client","resultsDescription":"An integer."},"0x344EA166":{"name":"GET_PLAYER_FROM_SERVER_ID","params":[{"name":"serverId","type":"int"}],"results":"Player","description":"","examples":[],"hash":"0x344EA166","ns":"CFX","apiset":"client","resultsDescription":""},"0x21C1DA8E":{"name":"GET_VEHICLE_DRAWN_WHEEL_ANGLE_MULT","params":[{"name":"vehicle","type":"Vehicle"}],"results":"float","description":"Gets a vehicle's multiplier used with a wheel's GET_VEHICLE_WHEEL_STEERING_ANGLE to determine the angle the wheel is rendered.","examples":[],"hash":"0x21C1DA8E","ns":"CFX","apiset":"client"},"0x7C278621":{"name":"GET_VEHICLE_LIGHTS_STATE","params":[{"name":"vehicle","type":"Vehicle"},{"name":"lightsOn","type":"BOOL*"},{"name":"highbeamsOn","type":"BOOL*"}],"results":"BOOL","description":"","examples":[],"hash":"0x7C278621","ns":"CFX","apiset":"server","resultsDescription":""},"0x1DC50247":{"name":"GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER","params":[{"name":"vehicle","type":"Vehicle"}],"results":"int","description":"Currently it only works when set to \"all players\".","examples":[],"hash":"0x1DC50247","ns":"CFX","apiset":"server","resultsDescription":""},"0xB48A1292":{"name":"GET_VEHICLE_GRAVITY_AMOUNT","params":[{"name":"vehicle","type":"Vehicle"}],"results":"float","description":"","examples":[],"hash":"0xB48A1292","ns":"CFX","apiset":"client","resultsDescription":""},"0x27396C75":{"name":"GET_VEHICLE_HANDLING_INT","params":[{"name":"vehicle","type":"Vehicle","ption":"The vehicle to obtain data for."},{"name":"class_","type":"char*","description":"The handling class to get. Only \"CHandlingData\" is supported at this time."},{"name":"fieldName","type":"char*","description":"The field name to get. These match the keys in `handling.meta`."}],"results":"int","description":"Returns the effective handling data of a vehicle as an integer value.\r\nExample: `local modelFlags = GetVehicleHandlingInt(vehicle, 'CHandlingData', 'strModelFlags')`","examples":[],"hash":"0x27396C75","ns":"CFX","apiset":"client","resultsDescription":"An integer."},"0x483B013C":{"name":"GET_VEHICLE_HANDBRAKE","params":[{"name":"vehicle","type":"Vehicle"}],"results":"BOOL","description":"","examples":[],"hash":"0x483B013C","ns":"CFX","apiset":"shared","resultsDescription":""},"0xD7147656":{"name":"GET_VEHICLE_HEADLIGHTS_COLOUR","params":[{"name":"vehicle","type":"Vehicle"}],"results":"int","description":"","examples":[],"hash":"0xD7147656","ns":"CFX","apiset":"server","resultsDescription":""},"0xD72CEF2":{"name":"GET_VEHICLE_DOOR_LOCK_STATUS","params":[{"name":"vehicle","type":"Vehicle"}],"results":"int","description":"```\nenum VehicleLockStatus = {\r\n    None = 0,\r\n    Unlocked = 1,\r\n    Locked = 2,\r\n    LockedForPlayer = 3,\r\n    StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.\r\n    CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1\r\n    CanBeBrokenIntoPersist = 8, -- Can be broken into persist\r\n    CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).\r\n}\n```","examples":[],"hash":"0xD72CEF2","ns":"CFX","apiset":"server","resultsDescription":""},"0xFB341304":{"name":"GET_VEHICLE_HANDLING_VECTOR","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to obtain data for."},{"name":"class_","type":"char*","description":"The handling class to get. Only \"CHandlingData\" is supported at this time."},{"name":"fieldName","type":"char*","description":"The field name to get. These match the keys in `handling.meta`."}],"results":"Vector3","description":"Returns the effective handling data of a vehicle as a vector value.\r\nExample: `local inertiaMultiplier = GetVehicleHandlingVector(vehicle, 'CHandlingData', 'vecInertiaMultiplier')`","examples":[],"hash":"0xFB341304","ns":"CFX","apiset":"client","resultsDescription":"An integer."},"0xF1D1D689":{"name":"GET_VEHICLE_HIGH_GEAR","params":[{"name":"vehicle","type":"Vehicle"}],"results":"int","description":"","examples":[],"hash":"0xF1D1D689","ns":"CFX","apiset":"client","resultsDescription":""},"0xE7B12B54":{"name":"GET_VEHICLE_CURRENT_RPM","params":[{"name":"vehicle","type":"Vehicle"}],"results":"float","description":"","examples":[],"hash":"0xE7B12B54","ns":"CFX","apiset":"client","resultsDescription":""},"0xCCFF3B6E":{"name":"GET_VEHICLE_INTERIOR_COLOUR","params":[{"name":"vehicle","type":"Vehicle"},{"name":"color","type":"int*"}],"results":"void","description":"","examples":[],"hash":"0xCCFF3B6E","ns":"CFX","apiset":"server","resultsDescription":""},"0xE02B51D7":{"name":"GET_VEHICLE_TURBO_PRESSURE","params":[{"name":"vehicle","type":"Vehicle"}],"results":"float","description":"","examples":[],"hash":"0xE02B51D7","ns":"CFX","apiset":"client","resultsDescription":""},"0x4039B485":{"name":"GET_RESOURCE_STATE","params":[{"name":"resourceName","type":"char*","description":"The name of the resource."}],"results":"char*","description":"Returns the current state of the specified resource.xamples":[],"hash":"0x4039B485","ns":"CFX","apiset":"shared","resultsDescription":"The resource state. One of `\"missing\", \"started\", \"starting\", \"stopped\", \"stopping\", \"uninitialized\" or \"unknown\"`."},"0xE8522D58":{"name":"GET_VEHICLE_NUMBER_PLATE_TEXT","params":[{"name":"vehicle","type":"Vehicle"}],"results":"char*","description":"","examples":[],"hash":"0xE8522D58","ns":"CFX","apiset":"server","resultsDescription":""},"0xEDF4B0FC":{"name":"GET_VEHICLE_NUMBER_OF_WHEELS","params":[{"name":"vehicle","type":"Vehicle"}],"results":"int","description":"","examples":[],"hash":"0xEDF4B0FC","ns":"CFX","apiset":"client","resultsDescription":""},"0xE52D9680":{"name":"GET_PLAYER_GUID","params":[{"name":"playerSrc","type":"char*"}],"results":"char*","description":"","examples":[],"hash":"0xE52D9680","ns":"CFX","apiset":"server","resultsDescription":""},"0x954465DE":{"name":"GET_VEHICLE_STEERING_SCALE","params":[{"name":"vehicle","type":"Vehicle"}],"results":"float","description":"","examples":[],"hash":"0x954465DE","ns":"CFX","apiset":"client","resultsDescription":""},"0x5F739BB8":{"name":"GET_VEHICLE_FUEL_LEVEL","params":[{"name":"vehicle","type":"Vehicle"}],"results":"float","description":"","examples":[],"hash":"0x5F739BB8","ns":"CFX","apiset":"client","resultsDescription":""},"0x642FC12F":{"name":"GET_VEHICLE_HANDLING_FLOAT","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to obtain data for."},{"name":"class_","type":"char*","description":"The handling class to get. Only \"CHandlingData\" is supported at this time."},{"name":"fieldName","type":"char*","description":"The field name to get. These match the keys in `handling.meta`."}],"results":"float","description":"Returns the effective handling data of a vehicle as a floating-point value.\r\nExample: `local fSteeringLock = GetVehicleHandlingFloat(vehicle, 'CHandlingData', 'fSteeringLock')`","examples":[],"hash":"0x642FC12F","ns":"CFX","apiset":"client","resultsDescription":"A floating-point value."},"0xE41595CE":{"name":"GET_VEHICLE_PETROL_TANK_HEALTH","params":[{"name":"vehicle","type":"Vehicle"}],"results":"float","description":"","examples":[],"hash":"0xE41595CE","ns":"CFX","apiset":"server","resultsDescription":""},"0xA0DBD08D":{"name":"GET_VEHICLE_DASHBOARD_COLOUR","params":[{"name":"vehicle","type":"Vehicle"},{"name":"color","type":"int*"}],"results":"void","description":"","examples":[],"hash":"0xA0DBD08D","ns":"CFX","apiset":"server","resultsDescription":""},"0x499747B6":{"name":"GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX","params":[{"name":"vehicle","type":"Vehicle"}],"results":"int","description":"","examples":[],"hash":"0x499747B6","ns":"CFX","apiset":"server","resultsDescription":""},"0xFD15C065":{"name":"GET_VEHICLE_DIRT_LEVEL","params":[{"name":"vehicle","type":"Vehicle"}],"results":"float","description":"","examples":[],"hash":"0xFD15C065","ns":"CFX","apiset":"server","resultsDescription":""},"0xC62AAC98":{"name":"GET_VEHICLE_ALARM_TIME_LEFT","params":[{"name":"vehicle","type":"Vehicle"}],"results":"int","description":"","examples":[],"hash":"0xC62AAC98","ns":"CFX","apiset":"client","resultsDescription":""},"0x8880038A":{"name":"GET_VEHICLE_ENGINE_HEALTH","params":[{"name":"vehicle","type":"Vehicle"}],"results":"float","description":"","examples":[],"hash":"0x8880038A","ns":"CFX","apiset":"server","resultsDescription":""},"0xAFE92319":{"name":"GET_VEHICLE_PED_IS_IN","params":[{"name":"ped","type":"Ped","description":"The target ped"},{"name":"lastVehicle","type":"BOOL","description":"False = CurrentVehicle, True = LastVehicle"}],"rs":"Vehicle","description":"Gets the vehicle the specified Ped is/was in depending on bool value. This native is used server side when using OneSync.","examples":[],"hash":"0xAFE92319","ns":"CFX","apiset":"server","resultsDescription":"The vehicle id. Returns 0 if the ped is/was not in a vehicle."},"0x4D97BCC7":{"name":"GET_PLAYER_SERVER_ID","params":[{"name":"player","type":"Player"}],"results":"int","description":"","examples":[],"hash":"0x4D97BCC7","ns":"CFX","apiset":"client","resultsDescription":""},"0x80E4659B":{"name":"GET_VEHICLE_EXTRA_COLOURS","params":[{"name":"vehicle","type":"Vehicle"},{"name":"pearlescentColor","type":"int*"},{"name":"wheelColor","type":"int*"}],"results":"void","description":"","examples":[],"hash":"0x80E4659B","ns":"CFX","apiset":"server","resultsDescription":""},"0x57037960":{"name":"GET_VEHICLE_RADIO_STATION_INDEX","params":[{"name":"vehicle","type":"Vehicle"}],"results":"int","description":"","examples":[],"hash":"0x57037960","ns":"CFX","apiset":"server","resultsDescription":""},"0x872CF42":{"name":"GET_VEHICLE_ROOF_LIVERY","params":[{"name":"vehicle","type":"Vehicle"}],"results":"int","description":"","examples":[],"hash":"0x872CF42","ns":"CFX","apiset":"server","resultsDescription":""},"0xDDB298AE":{"name":"GET_VEHICLE_NEXT_GEAR","params":[{"name":"vehicle","type":"Vehicle"}],"results":"int","description":"","examples":[],"hash":"0xDDB298AE","ns":"CFX","apiset":"client","resultsDescription":""},"0x1382FCEA":{"name":"GET_VEHICLE_STEERING_ANGLE","params":[{"name":"vehicle","type":"Vehicle"}],"results":"float","description":"","examples":[],"hash":"0x1382FCEA","ns":"CFX","apiset":"client","resultsDescription":""},"0x75280015":{"name":"GET_VEHICLE_TYRE_SMOKE_COLOR","params":[{"name":"vehicle","type":"Vehicle"},{"name":"r","type":"int*"},{"name":"g","type":"int*"},{"name":"b","type":"int*"}],"results":"void","description":"","examples":[],"hash":"0x75280015","ns":"CFX","apiset":"server","resultsDescription":""},"0xBDBA226F":{"name":"GET_NUI_CURSOR_POSITION","params":[{"name":"x","type":"int*"},{"name":"y","type":"int*"}],"results":"void","description":"","examples":[],"hash":"0xBDBA226F","ns":"CFX","apiset":"client"},"0x70FE2EFF":{"name":"GET_VEHICLE_WHEEL_BRAKE_PRESSURE","params":[{"name":"vehicle","type":"Vehicle"},{"name":"wheelIndex","type":"int"}],"results":"float","description":"Gets brake pressure of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.","examples":[],"hash":"0x70FE2EFF","ns":"CFX","apiset":"client"},"0xD240123E":{"name":"GET_SELECTED_PED_WEAPON","params":[{"name":"ped","type":"Ped","description":"The target ped."}],"results":"Hash","description":"Returns a hash of selected ped weapon.","examples":[],"hash":"0xD240123E","ns":"CFX","apiset":"server","resultsDescription":"The weapon hash."},"0xD1D07351":{"name":"GET_VEHICLE_THROTTLE_OFFSET","params":[{"name":"vehicle","type":"Vehicle"}],"results":"float","description":"","examples":[],"hash":"0xD1D07351","ns":"CFX","apiset":"client","aliases":["GET_VEHICLE_CURRENT_ACCELERATION"],"resultsDescription":"A float among -1 and 1 according if the vehicle is moving forwards or backwards"},"0x4046B66":{"name":"GET_VEHICLE_WHEEL_SIZE","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to obtain data for."}],"results":"float","description":"Returns vehicle's wheels' size (size is the same for all the wheels, cannot get/set specific wheel of vehicle).\r\nOnly works on non-default wheels (returns 0 in case of default wheels).","examples":[],"hash":"0x4046B66","ns":"Cpiset":"client","resultsDescription":"Float representing size of the wheel (usually between 0.5 and 1.5)"},"0x137260D1":{"name":"GET_VEHICLE_WHEELIE_STATE","params":[{"name":"vehicle","type":"Vehicle","description":"Vehicle"}],"results":"int","description":"List of known states:\n\n```\n1: Not wheeling.\r\n65: Vehicle is ready to do wheelie (burnouting).\r\n129: Vehicle is doing wheelie.\n```","examples":[{"lang":"lua","code":"Citizen.CreateThread(function()\r\n  while true do\r\n    Wait(1)\r\n\r\n    local veh = GetVehiclePedIsUsing(PlayerPedId())\r\n    if veh ~= 0 then\r\n      local wheelieState = GetVehicleWheelieState(veh)\r\n      if wheelieState == 1 then\r\n        print(\"Nothing\")\r\n      elseif wheelieState == 65 then\r\n        print(\"Ready to wheelie!\")\r\n      elseif wheelieState == 129 then\r\n        print(\"Doing wheelie!\")\r\n      end\r\n    end\r\n  end\r\nend)"}],"hash":"0x137260D1","ns":"CFX","apiset":"client","resultsDescription":"Vehicle's current wheelie state."},"0xFFF65C63":{"name":"IS_BIGMAP_ACTIVE","params":[],"results":"BOOL","description":"<!-- Native implemented by Disquse. 0xFFF65C63 -->\n\nReturns true if the minimap is currently expanded. False if it's the normal minimap state.\r\nUse [`IsBigmapFull`](#\\_0x66EE14B2) to check if the full map is currently revealed on the minimap.","examples":[{"lang":"lua","code":"local expanded = IsBigmapActive()\r\nlocal fullMap = IsBigmapFull()\r\nprint(\"The minimap is currently \" .. (expanded and \"expanded\" or \"normal size\") .. \" and the full map is currently \" .. (fullMap and \"revealed\" or \"not revealed\") .. \".\")"},{"lang":"cs","code":"bool expanded = IsBigmapActive();\r\nbool fullMap = IsBigmapFull();\r\n\r\nDebug.WriteLine($\"The minimap is currently {(expanded ? \"expanded\" : \"normal size\")} and the full map is currently {(fullMap ? \"revealed\" : \"not revealed\")}.\");"}],"hash":"0xFFF65C63","ns":"CFX","apiset":"client","resultsDescription":"A bool indicating if the minimap is currently expanded or normal state."},"0xCEE21AB2":{"name":"GET_VEHICLE_WHEEL_RIM_COLLIDER_SIZE","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to obtain data for."},{"name":"wheelIndex","type":"int","description":"Index of wheel, 0-3."}],"results":"float","description":"","examples":[],"hash":"0xCEE21AB2","ns":"CFX","apiset":"client","resultsDescription":"Float representing size of the rim collider. Not sure what it is used for, probably to detect whether bullets hit rim or tire and puncture it (and to determine size of the wheel when tire is fully blown)."},"0xA0867448":{"name":"GET_VEHICLE_WHEEL_STEERING_ANGLE","params":[{"name":"vehicle","type":"Vehicle"},{"name":"wheelIndex","type":"int"}],"results":"float","description":"Gets steering angle of a wheel.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.","examples":[],"hash":"0xA0867448","ns":"CFX","apiset":"client","resultsDescription":"The steering angle of the wheel, with 0 being straight."},"0x7EBB9929":{"name":"IS_ACE_ALLOWED","params":[{"name":"object","type":"char*"}],"results":"BOOL","description":"","examples":[],"hash":"0x7EBB9929","ns":"CFX","apiset":"shared","resultsDescription":""},"0xA7F04022":{"name":"GET_VEHICLE_WHEEL_SURFACE_MATERIAL","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to obtain data for."},{"name":"wheelIndex","type":"int","description":"Index of wheel, 0-3."}],"results":"int","description":"","examples":[],"hash":"0xA7F04022","ns":"CFX","apiset":"client","resultsDescription":ger representing the index of the current surface material of that wheel. Check materials.dat for the indexes."},"0xE0BA9FE6":{"name":"GET_VEHICLE_WHEEL_TIRE_COLLIDER_SIZE","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to obtain data for."},{"name":"wheelIndex","type":"int","description":"Index of wheel, 0-3."}],"results":"float","description":"","examples":[],"hash":"0xE0BA9FE6","ns":"CFX","apiset":"client","resultsDescription":"Float representing size of the wheel collider."},"0x13D53892":{"name":"GET_VEHICLE_WINDOW_TINT","params":[{"name":"vehicle","type":"Vehicle"}],"results":"int","description":"","examples":[],"hash":"0x13D53892","ns":"CFX","apiset":"server","resultsDescription":""},"0xDA58D7AE":{"name":"GET_VEHICLE_WHEEL_TYPE","params":[{"name":"vehicle","type":"Vehicle"}],"results":"int","description":"","examples":[],"hash":"0xDA58D7AE","ns":"CFX","apiset":"server","resultsDescription":""},"0x2EA4AFFE":{"name":"GET_VEHICLE_WHEEL_Y_ROTATION","params":[{"name":"vehicle","type":"Vehicle"},{"name":"wheelIndex","type":"int"}],"results":"float","description":"","examples":[],"hash":"0x2EA4AFFE","ns":"CFX","apiset":"client","aliases":["GET_VEHICLE_WHEEL_XROT"],"resultsDescription":""},"0xD979143":{"name":"GET_WEAPON_DAMAGE_MODIFIER","params":[{"name":"weaponHash","type":"Hash","description":"Weapon name hash."}],"results":"float","description":"A getter for [\\_SET_WEAPON_DAMAGE_MODIFIER](#\\_0x4757F00BC6323CFE).","examples":[],"hash":"0xD979143","ns":"CFX","apiset":"client","resultsDescription":"A weapon damage modifier."},"0xE3551879":{"name":"INVOKE_FUNCTION_REFERENCE","params":[{"name":"referenceIdentity","type":"char*"},{"name":"argsSerialized","type":"char*"},{"name":"argsLength","type":"int"},{"name":"retvalLength","type":"int*"}],"results":"char*","description":"","examples":[],"hash":"0xE3551879","ns":"CFX","apiset":"shared","resultsDescription":""},"0x9C7B59F9":{"name":"GET_VEHICLE_WHEEL_WIDTH","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to obtain data for."}],"results":"float","description":"Returns vehicle's wheels' width (width is the same for all the wheels, cannot get/set specific wheel of vehicle).\r\nOnly works on non-default wheels (returns 0 in case of default wheels).","examples":[],"hash":"0x9C7B59F9","ns":"CFX","apiset":"client","resultsDescription":"Float representing width of the wheel (usually between 0.1 and 1.5)"},"0x7AAC3B4C":{"name":"IS_DUI_AVAILABLE","params":[{"name":"duiObject","type":"long","description":"The DUI browser handle."}],"results":"BOOL","description":"Returns whether or not a browser is created for a specified DUI browser object.","examples":[],"hash":"0x7AAC3B4C","ns":"CFX","apiset":"client","resultsDescription":"A boolean indicating TRUE if the browser is created."},"0xE4E83A5B":{"name":"HAS_VEHICLE_BEEN_OWNED_BY_PLAYER","params":[{"name":"vehicle","type":"Vehicle"}],"results":"BOOL","description":"","examples":[],"hash":"0xE4E83A5B","ns":"CFX","apiset":"server","resultsDescription":""},"0x9C9A3BE0":{"name":"HAS_ENTITY_BEEN_MARKED_AS_NO_LONGER_NEEDED","params":[{"name":"vehicle","type":"Vehicle"}],"results":"BOOL","description":"","examples":[],"hash":"0x9C9A3BE0","ns":"CFX","apiset":"server","resultsDescription":""},"0x66EE14B2":{"name":"IS_BIGMAP_FULL","params":[],"results":"BOOL","description":"<!-- Native implemented by Disquse. 0x66EE14B2 -->\n\nReturns true if the full map is currently revealed on the minimap.\r\nUse [`IsBigmapActive`](#\\_0xFFF65C63) to check if the minimap is currently expanded or in it's normte.","examples":[{"lang":"lua","code":"local expanded = IsBigmapActive()\r\nlocal fullMap = IsBigmapFull()\r\nprint(\"The minimap is currently \" .. (expanded and \"expanded\" or \"normal size\") .. \" and the full map is currently \" .. (fullMap and \"revealed\" or \"not revealed\") .. \".\")"},{"lang":"cs","code":"bool expanded = IsBigmapActive();\r\nbool fullMap = IsBigmapFull();\r\n\r\nDebug.WriteLine($\"The minimap is currently {(expanded ? \"expanded\" : \"normal size\")} and the full map is currently {(fullMap ? \"revealed\" : \"not revealed\")}.\");"}],"hash":"0x66EE14B2","ns":"CFX","apiset":"client","resultsDescription":"Returns true if the full map is currently revealed on the minimap."},"0xCF24C52E":{"name":"IS_DUPLICITY_VERSION","params":[],"results":"BOOL","description":"Gets whether or not this is the CitizenFX server.","examples":[],"hash":"0xCF24C52E","ns":"CFX","apiset":"shared","resultsDescription":"A boolean value."},"0xDEDAE23D":{"name":"IS_PLAYER_ACE_ALLOWED","params":[{"name":"playerSrc","type":"char*"},{"name":"object","type":"char*"}],"results":"BOOL","description":"","examples":[],"hash":"0xDEDAE23D","ns":"CFX","apiset":"server","resultsDescription":""},"0x149C9DA0":{"name":"GET_VEHICLE_WHEEL_SPEED","params":[{"name":"vehicle","type":"Vehicle"},{"name":"wheelIndex","type":"int"}],"results":"float","description":"Gets speed of a wheel at the tyre.\r\nMax number of wheels can be retrieved with the native GET_VEHICLE_NUMBER_OF_WHEELS.","examples":[],"hash":"0x149C9DA0","ns":"CFX","apiset":"client","resultsDescription":"An integer."},"0xF7535F32":{"name":"HAS_MINIMAP_OVERLAY_LOADED","params":[{"name":"id","type":"int","description":"A minimap overlay ID."}],"results":"BOOL","description":"Returns whether or not the specific minimap overlay has loaded.","examples":[],"hash":"0xF7535F32","ns":"CFX","apiset":"client","resultsDescription":"A boolean indicating load status."},"0x76A9EE1F":{"name":"LOAD_RESOURCE_FILE","params":[{"name":"resourceName","type":"char*","description":"The resource name."},{"name":"fileName","type":"char*","description":"The file in the resource."}],"results":"char*","description":"Reads the contents of a text file in a specified resource.\r\nIf executed on the client, this file has to be included in `files` in the resource manifest.\r\nExample: `local data = LoadResourceFile(\"devtools\", \"data.json\")`","examples":[],"hash":"0x76A9EE1F","ns":"CFX","apiset":"shared","resultsDescription":"The file contents"},"0xCC90CBCA":{"name":"GET_VEHICLE_WHEEL_X_OFFSET","params":[{"name":"vehicle","type":"Vehicle"},{"name":"wheelIndex","type":"int"}],"results":"float","description":"Returns the offset of the specified wheel relative to the wheel's axle center.","examples":[],"hash":"0xCC90CBCA","ns":"CFX","apiset":"client","resultsDescription":""},"0xBEFE93F4":{"name":"IS_PLAYER_COMMERCE_INFO_LOADED","params":[{"name":"playerSrc","type":"char*","description":"The player handle"}],"results":"BOOL","description":"Requests whether or not the commerce data for the specified player has loaded.","examples":[],"hash":"0xBEFE93F4","ns":"CFX","apiset":"server","resultsDescription":"A boolean."},"0x998B7FEE":{"name":"GET_VEHICLE_TOP_SPEED_MODIFIER","params":[{"name":"vehicle","type":"Vehicle","description":"The target vehicle."}],"results":"float","description":"A getter for [MODIFY_VEHICLE_TOP_SPEED](#\\_0x93A3996368C94158). Returns -1.0 if a modifier is not set.","examples":[],"hash":"0x998B7FEE","ns":"CFX","apiset":"client","resultsDescription":"Returns vehicle's modified top speed."},"0x404794Cme":"IS_PED_A_PLAYER","params":[{"name":"ped","type":"Ped"}],"results":"BOOL","description":"This native checks if the given ped is a player.","examples":[],"hash":"0x404794CA","ns":"CFX","apiset":"server","resultsDescription":"Returns `true` if the ped is a player, `false` otherwise."},"0xDC921211":{"name":"IS_VEHICLE_ALARM_SET","params":[{"name":"vehicle","type":"Vehicle"}],"results":"BOOL","description":"","examples":[],"hash":"0xDC921211","ns":"CFX","apiset":"client","resultsDescription":""},"0xA8F63EAB":{"name":"LOAD_PLAYER_COMMERCE_DATA","params":[{"name":"playerSrc","type":"char*","description":"The player handle"}],"results":"void","description":"Requests the commerce data for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED` to check if it has loaded.","examples":[],"hash":"0xA8F63EAB","ns":"CFX","apiset":"server"},"0x89A3881A":{"name":"IS_PLAYER_EVADING_WANTED_LEVEL","params":[{"name":"playerSrc","type":"char*","description":"The target player"}],"results":"BOOL","description":"```\nThis will return true if the player is evading wanted level, meaning that the wanted level stars are blink.\r\nOtherwise will return false.\r\n\r\nIf the player is not wanted, it simply returns false.\n```","examples":[],"hash":"0x89A3881A","ns":"CFX","apiset":"server","resultsDescription":"boolean value, depending if the player is evading his wanted level or not."},"0xF849ED67":{"name":"IS_VEHICLE_PREVIOUSLY_OWNED_BY_PLAYER","params":[{"name":"vehicle","type":"Vehicle"}],"results":"BOOL","description":"","examples":[],"hash":"0xF849ED67","ns":"CFX","apiset":"client","resultsDescription":""},"0x37CF52CE":{"name":"IS_PRINCIPAL_ACE_ALLOWED","params":[{"name":"principal","type":"char*"},{"name":"object","type":"char*"}],"results":"BOOL","description":"","examples":[],"hash":"0x37CF52CE","ns":"CFX","apiset":"shared","resultsDescription":""},"0x42098B5":{"name":"IS_VEHICLE_EXTRA_TURNED_ON","params":[{"name":"vehicle","type":"Vehicle"},{"name":"extraId","type":"int"}],"results":"BOOL","description":"","examples":[],"hash":"0x42098B5","ns":"CFX","apiset":"server","resultsDescription":""},"0x25EB5873":{"name":"IS_VEHICLE_SIREN_ON","params":[{"name":"vehicle","type":"Vehicle"}],"results":"BOOL","description":"","examples":[],"hash":"0x25EB5873","ns":"CFX","apiset":"server","resultsDescription":""},"0x48C80210":{"name":"IS_VEHICLE_TYRE_BURST","params":[{"name":"vehicle","type":"Vehicle"},{"name":"wheelID","type":"int"},{"name":"completely","type":"BOOL"}],"results":"BOOL","description":"","examples":[],"hash":"0x48C80210","ns":"CFX","apiset":"server","resultsDescription":""},"0xFC7F8EF4":{"name":"GET_VEHICLE_OIL_LEVEL","params":[{"name":"vehicle","type":"Vehicle"}],"results":"float","description":"","examples":[],"hash":"0xFC7F8EF4","ns":"CFX","apiset":"client","resultsDescription":""},"0xF9933BF4":{"name":"IS_VEHICLE_NEEDS_TO_BE_HOTWIRED","params":[{"name":"vehicle","type":"Vehicle"}],"results":"BOOL","description":"","examples":[],"hash":"0xF9933BF4","ns":"CFX","apiset":"client","resultsDescription":""},"0xA411F72C":{"name":"IS_VEHICLE_INTERIOR_LIGHT_ON","params":[{"name":"vehicle","type":"Vehicle"}],"results":"BOOL","description":"","examples":[],"hash":"0xA411F72C","ns":"CFX","apiset":"client","resultsDescription":""},"0xA7DAF7C":{"name":"IS_VEHICLE_WANTED","params":[{"name":"vehicle","type":"Vehicle"}],"results":"BOOL","description":"","examples":[],"hash":"0xA7DAF7C","ns":"CFX","apiset":"client","resultsDescription":""},"0xF4F495CB":{"name":"GET_VEHICLE_ENGINE_TEMPERATURE","params":[{"name":"vehicle"":"Vehicle"}],"results":"float","description":"","examples":[],"hash":"0xF4F495CB","ns":"CFX","apiset":"client","resultsDescription":""},"0x7995539E":{"name":"LOAD_PLAYER_COMMERCE_DATA_EXT","params":[{"name":"playerSrc","type":"char*","description":"The player handle"}],"results":"void","description":"Requests the commerce data from Tebex for the specified player, including the owned SKUs. Use `IS_PLAYER_COMMERCE_INFO_LOADED` to check if it has loaded.","examples":[],"hash":"0x7995539E","ns":"CFX","apiset":"server"},"0x32C5355A":{"name":"MUMBLE_ADD_VOICE_TARGET_PLAYER","params":[{"name":"targetId","type":"int","description":"A Mumble voice target ID, ranging from 1..30 (inclusive)."},{"name":"player","type":"Player","description":"A game player index."}],"results":"void","description":"Adds the specified player to the target list for the specified Mumble voice target ID.","examples":[],"hash":"0x32C5355A","ns":"CFX","apiset":"client"},"0xBB340D04":{"name":"IS_VEHICLE_ENGINE_STARTING","params":[{"name":"vehicle","type":"Vehicle"}],"results":"BOOL","description":"","examples":[],"hash":"0xBB340D04","ns":"CFX","apiset":"shared","resultsDescription":""},"0xA194934D":{"name":"IS_STREAMING_FILE_READY","params":[{"name":"registerAs","type":"char*","description":"The file name to check, for example `asset.ydr`."}],"results":"BOOL","description":"**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nReturns whether an asynchronous streaming file registration completed.","examples":[],"hash":"0xA194934D","ns":"CFX","apiset":"client","resultsDescription":"Whether or not the streaming file has been registered."},"0xEF65929C":{"name":"GET_VEHICLE_WHEEL_TIRE_COLLIDER_WIDTH","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to obtain data for."},{"name":"wheelIndex","type":"int","description":"Index of wheel, 0-3."}],"results":"float","description":"","examples":[],"hash":"0xEF65929C","ns":"CFX","apiset":"client","resultsDescription":"Float representing width of the wheel collider."},"0x1D14F4FE":{"name":"IS_PLAYER_COMMERCE_INFO_LOADED_EXT","params":[{"name":"playerSrc","type":"char*","description":"The player handle"}],"results":"BOOL","description":"Requests whether or not the commerce data for the specified player has loaded from Tebex.","examples":[],"hash":"0x1D14F4FE","ns":"CFX","apiset":"server","resultsDescription":"A boolean."},"0x4D386C9E":{"name":"MUMBLE_ADD_VOICE_TARGET_CHANNEL","params":[{"name":"targetId","type":"int","description":"A Mumble voice target ID, ranging from 1..30 (inclusive)."},{"name":"channel","type":"int","description":"A game voice channel ID."}],"results":"void","description":"Adds the specified channel to the target list for the specified Mumble voice target ID.","examples":[],"hash":"0x4D386C9E","ns":"CFX","apiset":"client"},"0x54A677F5":{"name":"GET_VEHICLE_WHEEL_HEALTH","params":[{"name":"vehicle","type":"Vehicle"},{"name":"wheelIndex","type":"int"}],"results":"float","description":"","examples":[],"hash":"0x54A677F5","ns":"CFX","apiset":"client","resultsDescription":""},"0xC79F44BF":{"name":"MUMBLE_ADD_VOICE_CHANNEL_LISTEN","params":[{"name":"channel","type":"int","description":"A game voice channel ID."}],"results":"void","description":"Starts listening to the specified channel, when available.","examples":[],"hash":"0xC79F44BF","ns":"CFX","apiset":"client"},"0x8555DCBA":{"name":"MUMBLE_CLEAR_VOICE_TARGET","params":[{"name":"targetId","type":"int","description":"A Mumble voice target ID, ranging from 1..30 (inclusive)."}ts":"void","description":"Clears the target list for the specified Mumble voice target ID.","examples":[],"hash":"0x8555DCBA","ns":"CFX","apiset":"client"},"0x912E21DA":{"name":"MUMBLE_CLEAR_VOICE_TARGET_PLAYERS","params":[{"name":"targetId","type":"int","description":"A Mumble voice target ID, ranging from 1..30 (inclusive)."}],"results":"void","description":"Clears players from the target list for the specified Mumble voice target ID.","examples":[],"hash":"0x912E21DA","ns":"CFX","apiset":"client"},"0x231523B7":{"name":"MUMBLE_REMOVE_VOICE_CHANNEL_LISTEN","params":[{"name":"channel","type":"int","description":"A game voice channel ID."}],"results":"void","description":"Stops listening to the specified channel.","examples":[],"hash":"0x231523B7","ns":"CFX","apiset":"client"},"0x74C597D9":{"name":"MUMBLE_SET_AUDIO_OUTPUT_DISTANCE","params":[{"name":"distance","type":"float","description":"The output distance."}],"results":"void","description":"Sets the current output distance. The player will be able to hear other players talking within this distance.","examples":[],"hash":"0x74C597D9","ns":"CFX","apiset":"client"},"0xE6EB2CD8":{"name":"MUMBLE_SET_SERVER_ADDRESS","params":[{"name":"address","type":"char*","description":"The address of the mumble server."},{"name":"port","type":"int","description":"The port of the mumble server."}],"results":"void","description":"Changes the Mumble server address to connect to, and reconnects to the new address.","examples":[],"hash":"0xE6EB2CD8","ns":"CFX","apiset":"client"},"0xB816370A":{"name":"MUMBLE_IS_CONNECTED","params":[],"results":"BOOL","description":"This native will return true if the user succesfully connected to the voice server.\r\nIf the user disabled the voice-chat setting it will return false.","examples":[],"hash":"0xB816370A","ns":"CFX","apiset":"client","resultsDescription":"True if the player is connected to a mumble server."},"0x960A4A95":{"name":"MUMBLE_SET_VOICE_TARGET","params":[{"name":"targetId","type":"int","description":"A Mumble voice target ID, ranging from 1..30 (inclusive). 0 disables voice targets, and 31 is server loopback."}],"results":"void","description":"Sets the current Mumble voice target ID to broadcast voice to.","examples":[],"hash":"0x960A4A95","ns":"CFX","apiset":"client"},"0x61C309E3":{"name":"MUMBLE_SET_VOLUME_OVERRIDE","params":[{"name":"player","type":"Player","description":"A game player index."},{"name":"volume","type":"float","description":"The volume, ranging from 0.0 to 1.0 (or above)."}],"results":"void","description":"Overrides the output volume for a particular player on Mumble. This will also bypass 3D audio and distance calculations. -1.0 to reset the override.\n\nSet to -1.0 to reset the Volume override.","examples":[],"hash":"0x61C309E3","ns":"CFX","apiset":"client"},"0x526FEE31":{"name":"NETWORK_GET_ENTITY_OWNER","params":[{"name":"entity","type":"Entity","description":"The entity to get the owner for."}],"results":"int","description":"Returns the owner ID of the specified entity.","examples":[],"hash":"0x526FEE31","ns":"CFX","apiset":"shared","resultsDescription":"On the server, the server ID of the entity owner. On the client, returns the player/slot ID of the entity owner."},"0x9E35DAB6":{"name":"NETWORK_GET_NETWORK_ID_FROM_ENTITY","params":[{"name":"entity","type":"Entity"}],"results":"int","description":"","examples":[],"hash":"0x9E35DAB6","ns":"CFX","apiset":"server","resultsDescription":""},"0xA896B20A":{"name":"REMOVE_REPLACE_TEXTURE","params":[{"name":"origTxd","type":"char*"},{"name":"origTxn","type":"char*"}],"re"void","description":"Experimental natives, please do not use in a live environment.","examples":[],"hash":"0xA896B20A","ns":"CFX","apiset":"client"},"0x8E8CC653":{"name":"PERFORM_HTTP_REQUEST_INTERNAL","params":[{"name":"requestData","type":"char*"},{"name":"requestDataLength","type":"int"}],"results":"int","description":"","examples":[],"hash":"0x8E8CC653","ns":"CFX","apiset":"server","resultsDescription":""},"0xF8B7D7BB":{"name":"PROFILER_IS_RECORDING","params":[],"results":"BOOL","description":"Returns true if the profiler is active.","examples":[],"hash":"0xF8B7D7BB","ns":"CFX","apiset":"shared","resultsDescription":"True or false."},"0x9862B266":{"name":"REGISTER_RESOURCE_ASSET","params":[{"name":"resourceName","type":"char*","description":"The resource to add the asset to."},{"name":"fileName","type":"char*","description":"A file name in the resource."}],"results":"char*","description":"**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a cached resource asset with the resource system, similar to the automatic scanning of the `stream/` folder.","examples":[],"hash":"0x9862B266","ns":"CFX","apiset":"server","resultsDescription":"A cache string to pass to `REGISTER_STREAMING_FILE_FROM_CACHE` on the client."},"0x3C2F9037":{"name":"REGISTER_ARCHETYPES","params":[{"name":"factory","type":"func","description":"A function returning a list of archetypes."}],"results":"void","description":"**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a set of archetypes with the game engine. These should match `CBaseArchetypeDef` class information from the game.","examples":[{"lang":"lua","code":"RegisterArchetypes(function()\r\n\treturn {\r\n\t\t{\r\n\t\t\tflags = 32,\r\n\t\t\tbbMin = vector3(-39.99570000, -8.00155600, -2.56818800),\r\n\t\t\tbbMax = vector3(40.00439000, 7.99858000, 1.44575100),\r\n\t\t\tbsCentre = vector3(0.00434110, -0.00148870, -0.56121830),\r\n\t\t\tbsRadius = 40.84160000,\r\n\t\t\tname = 'my_asset',\r\n\t\t\ttextureDictionary = 'my_asset',\r\n\t\t\tphysicsDictionary = 'my_asset',\r\n\t\t\tassetName = 'my_asset',\r\n\t\t\tassetType = 'ASSET_TYPE_DRAWABLE',\r\n\t\t\tlodDist = 450.45,\r\n\t\t\tspecialAttribute = 0\r\n\t\t}\r\n\t}\r\nend)"}],"hash":"0x3C2F9037","ns":"CFX","apiset":"client"},"0x410DA7D3":{"name":"REGISTER_ENTITIES","params":[{"name":"factory","type":"func","description":"A function returning a list of entities."}],"results":"void","description":"**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a set of entities with the game engine. These should match `CEntityDef` class information from the game.\r\nAt this time, this function **should not be used in a live environment**.","examples":[],"hash":"0x410DA7D3","ns":"CFX","apiset":"client"},"0x1B3A363":{"name":"REGISTER_FONT_FILE","params":[{"name":"fileName","type":"char*","description":"The name of the .gfx file, without extension."}],"results":"void","description":"Registers a specified .gfx file as GFx font library.\r\nThe .gfx file has to be registered with the streamer already.","examples":[],"hash":"0x1B3A363","ns":"CFX","apiset":"client"},"0xCD03CDA9":{"name":"REGISTER_NUI_CALLBACK_TYPE","params":[{"name":"callbackType","type":"char*"}],"results":"void","description":"","examples":[],"hash":"0xCD03CDA9","ns":"CFX","apiset":"client"},"0xB88A73AD":{"name":"SCHEDULE_RESOURCE_TICK","params":[{"name":"resourceName","type":"char*","description":"The reto tick."}],"results":"void","description":"Schedules the specified resource to run a tick as soon as possible, bypassing the server's fixed tick rate.","examples":[],"hash":"0xB88A73AD","ns":"CFX","apiset":"server"},"0xD233A168":{"name":"REGISTER_RESOURCE_AS_EVENT_HANDLER","params":[{"name":"eventName","type":"char*","description":"An event name, or \"\\*\" to disable HLL event filtering for this resource."}],"results":"void","description":"An internal function which allows the current resource's HLL script runtimes to receive state for the specified event.","examples":[],"hash":"0xD233A168","ns":"CFX","apiset":"shared"},"0x1493DCC1":{"name":"REGISTER_STREAMING_FILE_FROM_KVS","params":[{"name":"kvsKey","type":"char*","description":"The KVP key in the current resource to register as an asset."}],"results":"void","description":"**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a KVP value as an asset with the GTA streaming module system. This function currently won't work.","examples":[],"hash":"0x1493DCC1","ns":"CFX","apiset":"client"},"0x11A5B7ED":{"name":"RESET_MAP_ZOOM_DATA_LEVEL","params":[{"name":"index","type":"int","description":"Zoom level index."}],"results":"void","description":"Resets values from the zoom level data by index to defaults from mapzoomdata.meta.","examples":[],"hash":"0x11A5B7ED","ns":"CFX","apiset":"client"},"0x96F93CCE":{"name":"REQUEST_PLAYER_COMMERCE_SESSION","params":[{"name":"playerSrc","type":"char*","description":"The player handle"},{"name":"skuId","type":"int","description":"The ID of the SKU."}],"results":"void","description":"Requests the specified player to buy the passed SKU. This'll pop up a prompt on the client, which upon acceptance\r\nwill open the browser prompting further purchase details.","examples":[],"hash":"0x96F93CCE","ns":"CFX","apiset":"server"},"0xF44BFB95":{"name":"REGISTER_STREAMING_FILE_FROM_URL","params":[{"name":"registerAs","type":"char*","description":"The file name to register as, for example `asset.ydr`."},{"name":"url","type":"char*","description":"The URL to fetch the asset from."}],"results":"void","description":"**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a file from an URL as a streaming asset in the GTA streaming subsystem. This will asynchronously register the asset, and caching is done based on the URL itself - cache headers are ignored.\n\nUse `IS_STREAMING_FILE_READY` to check if the asset has been registered successfully.","examples":[],"hash":"0xF44BFB95","ns":"CFX","apiset":"client"},"0x7A6462F4":{"name":"NETWORK_GET_VOICE_PROXIMITY_OVERRIDE","params":[{"name":"playerSrc","type":"char*","description":"The player handle"}],"results":"Vector3","description":"","examples":[],"hash":"0x7A6462F4","ns":"CFX","apiset":"server","resultsDescription":""},"0xCE8E25B4":{"name":"MUMBLE_SET_VOLUME_OVERRIDE_BY_SERVER_ID","params":[{"name":"serverId","type":"int","description":"The player's server id."},{"name":"volume","type":"float","description":"The volume, ranging from 0.0 to 1.0 (or above)."}],"results":"void","description":"Overrides the output volume for a particular player with the specified server id and player name on Mumble. This will also bypass 3D audio and distance calculations. -1.0 to reset the override.","examples":[],"hash":"0xCE8E25B4","ns":"CFX","apiset":"client"},"0xA09E7E7B":{"name":"SAVE_RESOURCE_FILE","params":[{"name":"resourceName","type":"char*","description":"The name of the resource."},{"namme","type":"char*","description":"The name of the file."},{"name":"data","type":"char*","description":"The data to write to the file."},{"name":"dataLength","type":"int","description":"The length of the written data."}],"results":"BOOL","description":"Writes the specified data to a file in the specified resource.\r\nUsing a length of `-1` will automatically detect the length assuming the data is a C string.","examples":[],"hash":"0xA09E7E7B","ns":"CFX","apiset":"server","resultsDescription":"A value indicating if the write succeeded."},"0x1D735B93":{"name":"SEND_DUI_MOUSE_UP","params":[{"name":"duiObject","type":"long","description":"The DUI browser handle."},{"name":"button","type":"char*","description":"Either `'left'`, `'middle'` or `'right'`."}],"results":"void","description":"Injects a 'mouse up' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE.","examples":[],"hash":"0x1D735B93","ns":"CFX","apiset":"client"},"0x5D01F191":{"name":"SEND_DUI_MOUSE_DOWN","params":[{"name":"duiObject","type":"long","description":"The DUI browser handle."},{"name":"button","type":"char*","description":"Either `'left'`, `'middle'` or `'right'`."}],"results":"void","description":"Injects a 'mouse down' event for a DUI object. Coordinates are expected to be set using SEND_DUI_MOUSE_MOVE.","examples":[],"hash":"0x5D01F191","ns":"CFX","apiset":"client"},"0x5FA79B0F":{"name":"REGISTER_COMMAND","params":[{"name":"commandName","type":"char*","description":"The command you want to register."},{"name":"handler","type":"func","description":"A handler function that gets called whenever the command is executed."},{"name":"restricted","type":"BOOL","description":"If this is a server command and you set this to true, then players will need the command.yourCommandName ace permission to execute this command."}],"results":"void","description":"Registered commands can be executed by entering them in the client console (this works for client side and server side registered commands). Or by entering them in the server console/through an RCON client (only works for server side registered commands). Or if you use a supported chat resource, like the default one provided in the cfx-server-data repository, then you can enter the command in chat by prefixing it with a `/`.\n\nCommands registered using this function can also be executed by resources, using the [`ExecuteCommand` native](#\\_0x561C060B).\n\nThe restricted bool is not used on the client side. Permissions can only be checked on the server side, so if you want to limit your command with an ace permission automatically, make it a server command (by registering it in a server script).\n\n**Example result**:\n\n![](https://i.imgur.com/TaCnG09.png)","examples":[{"lang":"lua","code":"-- (server side script)\r\n-- Registers a command named 'ping'.\r\nRegisterCommand(\"ping\", function(source, args, rawCommand)\r\n    -- If the source is > 0, then that means it must be a player.\r\n    if (source > 0) then\r\n    \r\n        -- result (using the default GTA:O chat theme) https://i.imgur.com/TaCnG09.png\r\n        TriggerClientEvent(\"chat:addMessage\", -1, {\r\n            args = {\r\n                GetPlayerName(source),\r\n                \"PONG!\"\r\n            },\r\n            color = { 5, 255, 255 }\r\n        })\r\n    \r\n    -- If it's not a player, then it must be RCON, a resource, or the server console directly.\r\n    else\r\n        print(\"This command was executed by the server console, RCON client, or a resource.\")\r\n    end\r\nend, false --[[this commat restricted, everyone can use this.]])"},{"lang":"cs","code":"RegisterCommand(\"ping\", new Action<int, List<object>, string>((source, args, rawCommand) =>\r\n{\r\n    if (source > 0) // it's a player.\r\n    {\r\n        // Create a message object.\r\n        dynamic messageObject = new ExpandoObject();\r\n        // Set the message object args (message author, message content)\r\n        messageObject.args = new string[] { GetPlayerName(source.ToString()), \"PONG!\" };\r\n        // Set the message color (r, g, b)\r\n        messageObject.color = new int[] { 5, 255, 255 };\r\n\r\n        // Trigger the client event with the message object on all clients.\r\n        TriggerClientEvent(\"chat:addMessage\", messageObject);\r\n    }\r\n    // It's not a player, so it's the server console, a RCON client, or a resource.\r\n    else\r\n    {\r\n        Debug.WriteLine(\"This command was executed by the server console, RCON client, or a resource.\");\r\n    }\r\n}), false /*This command is also not restricted, anyone can use it.*/ );"}],"hash":"0x5FA79B0F","ns":"CFX","apiset":"shared"},"0x341B16D2":{"name":"SET_CONVAR","params":[{"name":"varName","type":"char*"},{"name":"value","type":"char*"}],"results":"void","description":"","examples":[],"hash":"0x341B16D2","ns":"CFX","apiset":"server"},"0xF61D04C4":{"name":"SET_DISCORD_RICH_PRESENCE_ASSET_SMALL","params":[{"name":"assetName","type":"char*","description":"The name of a valid asset registered on Discordapp's developer dashboard. Note that the asset has to be registered under the same discord API application set using the SET_DISCORD_APP_ID native."}],"results":"void","description":"This native sets the small image asset for the discord rich presence implementation.","examples":[],"hash":"0xF61D04C4","ns":"CFX","apiset":"client"},"0xACF6D8EE":{"name":"REGISTER_FONT_ID","params":[{"name":"fontName","type":"char*","description":"The name of the font in the GFx font library."}],"results":"int","description":"Registers a specified font name for use with text draw commands.","examples":[],"hash":"0xACF6D8EE","ns":"CFX","apiset":"client","resultsDescription":"An index to use with [SET_TEXT_FONT](#\\_0x66E0276CC5F6B9DA) and similar natives."},"0xB39CA35C":{"name":"PROFILER_EXIT_SCOPE","params":[],"results":"void","description":"Scope exit for profiler.","examples":[],"hash":"0xB39CA35C","ns":"CFX","apiset":"shared"},"0x78608ACB":{"name":"SEND_NUI_MESSAGE","params":[{"name":"jsonString","type":"char*"}],"results":"BOOL","description":"","examples":[],"hash":"0x78608ACB","ns":"CFX","apiset":"client","resultsDescription":""},"0xB029D2FA":{"name":"SET_DISCORD_RICH_PRESENCE_ASSET_TEXT","params":[{"name":"text","type":"char*","description":"Text to be displayed when hovering over image asset. Note that you must also set a valid image asset using the SET_DISCORD_RICH_PRESENCE_ASSET native."}],"results":"void","description":"This native sets the hover text of the image asset for the discord rich presence implementation.","examples":[],"hash":"0xB029D2FA","ns":"CFX","apiset":"client"},"0x262663C5":{"name":"MUMBLE_CREATE_CHANNEL","params":[{"name":"id","type":"int","description":"ID of the channel."}],"results":"void","description":"Create a permanent voice channel.","examples":[],"hash":"0x262663C5","ns":"CFX","apiset":"server"},"0x9338D547":{"name":"SET_CONVAR_SERVER_INFO","params":[{"name":"varName","type":"char*"},{"name":"value","type":"char*"}],"results":"void","description":"","examples":[],"hash":"0x9338D547","ns":"CFX","apiset":"server"},"0xCEAD2D4B":{"name":"REGISTER_STREAMING_FCACHE","params":[{"name":"resourceName","type":"char*","description":"The resource to add the asset to."},{"name":"fileName","type":"char*","description":"A file name in the resource."},{"name":"cacheString","type":"char*","description":"The string returned from `REGISTER_RESOURCE_ASSET` on the server."}],"results":"void","description":"**Experimental**: This native may be altered or removed in future versions of CitizenFX without warning.\n\nRegisters a dynamic streaming asset from the server with the GTA streaming module system.","examples":[],"hash":"0xCEAD2D4B","ns":"CFX","apiset":"client"},"0x6D712937":{"name":"RESET_FLY_THROUGH_WINDSCREEN_PARAMS","params":[],"results":"void","description":"Resets parameters which is used by the game for checking is ped needs to fly through windscreen after a crash to default values.","examples":[],"hash":"0x6D712937","ns":"CFX","apiset":"client"},"0x4D3118ED":{"name":"SET_FLY_THROUGH_WINDSCREEN_PARAMS","params":[{"name":"vehMinSpeed","type":"float","description":"Vehicle minimum speed (default 35.0)."},{"name":"unkMinSpeed","type":"float","description":"Unknown minimum speed (default 40.0)."},{"name":"unkModifier","type":"float","description":"Unknown modifier (default 17.0)."},{"name":"minDamage","type":"float","description":"Minimum damage (default 2000.0)."}],"results":"BOOL","description":"Sets some in-game parameters which is used for checks is ped needs to fly through windscreen after a crash.","examples":[],"hash":"0x4D3118ED","ns":"CFX","apiset":"client","resultsDescription":"A bool indicating if parameters was set successfully."},"0x6A02254D":{"name":"SET_DISCORD_APP_ID","params":[{"name":"appId","type":"char*","description":"A valid Discord API App Id, can be generated at https://discordapp.com/developers/applications/"}],"results":"void","description":"This native sets the app id for the discord rich presence implementation.","examples":[],"hash":"0x6A02254D","ns":"CFX","apiset":"client"},"0xD9D7A0AA":{"name":"SEND_DUI_MOUSE_MOVE","params":[{"name":"duiObject","type":"long","description":"The DUI browser handle."},{"name":"x","type":"int","description":"The mouse X position."},{"name":"y","type":"int","description":"The mouse Y position."}],"results":"void","description":"Injects a 'mouse move' event for a DUI object. Coordinates are in browser space.","examples":[],"hash":"0xD9D7A0AA","ns":"CFX","apiset":"client"},"0xFE8064E3":{"name":"SET_HANDLING_FIELD","params":[{"name":"vehicle","type":"char*","description":"The vehicle class to set data for."},{"name":"class_","type":"char*","description":"The handling class to set. Only \"CHandlingData\" is supported at this time."},{"name":"fieldName","type":"char*","description":"The field name to set. These match the keys in `handling.meta`."},{"name":"value","type":"Any","description":"The value to set."}],"results":"void","description":"Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.\r\nExample: `SetHandlingField('AIRTUG', 'CHandlingData', 'fSteeringLock', 360.0)`","examples":[],"hash":"0xFE8064E3","ns":"CFX","apiset":"client"},"0x5EA72E76":{"name":"MUMBLE_CLEAR_VOICE_TARGET_CHANNELS","params":[{"name":"targetId","type":"int","description":"A Mumble voice target ID, ranging from 1..30 (inclusive)."}],"results":"void","description":"Clears channels from the target list for the specified Mumble voice target ID.","examples":[],"hash":"0x5EA72E76","ns":"CFX","apiset":"client"},"0x90DD01C":{"name":"SET_HANDLING_FLOAT","params":[{"name":"vehi":"char*","description":"The vehicle class to set data for."},{"name":"class_","type":"char*","description":"The handling class to set. Only \"CHandlingData\" is supported at this time."},{"name":"fieldName","type":"char*","description":"The field name to set. These match the keys in `handling.meta`."},{"name":"value","type":"float","description":"The floating-point value to set."}],"results":"void","description":"Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.\r\nExample: `SetHandlingFloat('AIRTUG', 'CHandlingData', 'fSteeringLock', 360.0)`","examples":[],"hash":"0x90DD01C","ns":"CFX","apiset":"client"},"0x5B912C3F":{"name":"NETWORK_GET_ENTITY_FROM_NETWORK_ID","params":[{"name":"netId","type":"int"}],"results":"Entity","description":"","examples":[],"hash":"0x5B912C3F","ns":"CFX","apiset":"server","resultsDescription":""},"0xD3A183A3":{"name":"SET_ENTITY_DISTANCE_CULLING_RADIUS","params":[{"name":"entity","type":"Entity","description":"The entity handle to override the distance culling radius."},{"name":"radius","type":"float","description":"The new distance culling radius."}],"results":"void","description":"It overrides the default distance culling radius of an entity. Set to `0.0` to reset.\r\nIf you want to interact with an entity outside of your players' scopes set the radius to a huge number.","examples":[],"hash":"0xD3A183A3","ns":"CFX","apiset":"server"},"0x285B43CA":{"name":"REGISTER_RESOURCE_BUILD_TASK_FACTORY","params":[{"name":"factoryId","type":"char*","description":"The identifier for the build task."},{"name":"factoryFn","type":"func","description":"The factory function."}],"results":"void","description":"Registers a build task factory for resources.\r\nThe function should return an object (msgpack map) with the following fields:\n\n```\n{\r\n// returns whether the specific resource should be built\r\nshouldBuild = func(resourceName: string): bool,\r\n\r\n// asynchronously start building the specific resource.\r\n// call cb when completed\r\nbuild = func(resourceName: string, cb: func(success: bool, status: string): void): void\r\n}\n```","examples":[],"hash":"0x285B43CA","ns":"CFX","apiset":"server"},"0xF5C6330C":{"name":"SET_HTTP_HANDLER","params":[{"name":"handler","type":"func"}],"results":"void","description":"","examples":[],"hash":"0xF5C6330C","ns":"CFX","apiset":"server"},"0x88B2355E":{"name":"SET_INTERIOR_PORTAL_FLAG","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"portalIndex","type":"int","description":"Interior portal index."},{"name":"flag","type":"int","description":"New flag value."}],"results":"void","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalIndex = 0\r\n\r\n  SetInteriorPortalFlag(interiorId, portalIndex, 1)\r\n  RefreshInterior(interiorId)\r\nend"}],"hash":"0x88B2355E","ns":"CFX","apiset":"client"},"0xCD380DA9":{"name":"SEND_DUI_MESSAGE","params":[{"name":"duiObject","type":"long","description":"The DUI browser handle."},{"name":"jsonString","type":"char*","description":"The message, encoded as JSON."}],"results":"void","description":"Sends a message to the specific DUI root page. This is similar to SEND_NUI_MESSAGE.","examples":[],"hash":"0xCD380DA9","ns":"CFX","apiset":"client"},"0xF90B7469":{"name":"SET_GAME_TYPE","params":[{"name":"gametypeName","type":"char*"}],"results":"void","description":"","examples":[],"h90B7469","ns":"CFX","apiset":"server"},"0x298FC783":{"name":"SET_INTERIOR_PORTAL_ROOM_FROM","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"portalIndex","type":"int","description":"Interior portal index."},{"name":"roomFrom","type":"int","description":"New value."}],"results":"void","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalIndex = 0\r\n\r\n  SetInteriorPortalRoomFrom(interiorId, portalIndex, 0)\r\n  RefreshInterior(interiorId)\r\nend"}],"hash":"0x298FC783","ns":"CFX","apiset":"client"},"0x3FF5E5F8":{"name":"SET_NUI_FOCUS_KEEP_INPUT","params":[{"name":"keepInput","type":"BOOL"}],"results":"void","description":"","examples":[],"hash":"0x3FF5E5F8","ns":"CFX","apiset":"client"},"0xF761D9F3":{"name":"SET_DUI_URL","params":[{"name":"duiObject","type":"long","description":"The DUI browser handle."},{"name":"url","type":"char*","description":"The new URL."}],"results":"void","description":"Navigates the specified DUI browser to a different URL.","examples":[],"hash":"0xF761D9F3","ns":"CFX","apiset":"client"},"0x8AB3F46C":{"name":"SET_HANDLING_INT","params":[{"name":"vehicle","type":"char*","description":"The vehicle class to set data for."},{"name":"class_","type":"char*","description":"The handling class to set. Only \"CHandlingData\" is supported at this time."},{"name":"fieldName","type":"char*","description":"The field name to set. These match the keys in `handling.meta`."},{"name":"value","type":"int","description":"The integer value to set."}],"results":"void","description":"Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.","examples":[],"hash":"0x8AB3F46C","ns":"CFX","apiset":"client"},"0x31C9A848":{"name":"SET_INTERIOR_ROOM_TIMECYCLE","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"roomIndex","type":"int","description":"Interior room index."},{"name":"timecycleHash","type":"int","description":"Timecycle hash."}],"results":"void","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  local timecycleHash = GetHashKey(\"scanline_cam\")\r\n  SetInteriorRoomTimecycle(interiorId, roomId, timecycleHash)\r\n  RefreshInterior(interiorId)\r\nend"}],"hash":"0x31C9A848","ns":"CFX","apiset":"client"},"0x3E882B23":{"name":"SET_MINIMAP_COMPONENT_POSITION","params":[{"name":"name","type":"char*","description":"The name of the minimap component to override."},{"name":"alignX","type":"char*","description":"Equivalent to the `alignX` field in `frontend.xml`."},{"name":"alignY","type":"char*","description":"Equivalent to the `alignY` field in `frontend.xml`."},{"name":"posX","type":"float","description":"Equivalent to the `posX` field in `frontend.xml`."},{"name":"posY","type":"float","description":"Equivalent to the `posY` field in `frontend.xml`."},{"name":"sizeX","type":"float","description":"Equivalent to the `sizeX` field in `frontend.xml`."},{"name":"sizeY","type":"float","description":"Equivalent to the `sizeY` field in `frontend.xml`."}],"results":"void","description":"Overrides the minimap component data (from `common:/data/ui/frontend.xml`) for a specified component.","examples":[],"ha2B23","ns":"CFX","apiset":"client","game":"gta5"},"0x221C09F1":{"name":"MUMBLE_GET_VOICE_CHANNEL_FROM_SERVER_ID","params":[{"name":"serverId","type":"int","description":"The player's server id."}],"results":"int","description":"Returns the mumble voice channel from a player's server id.","examples":[],"hash":"0x221C09F1","ns":"CFX","apiset":"client","resultsDescription":"Int representing the identifier of the voice channel."},"0xC795A4A9":{"name":"PROFILER_ENTER_SCOPE","params":[{"name":"scopeName","type":"char*","description":"Scope name."}],"results":"void","description":"Scope entry for profiler.","examples":[],"hash":"0xC795A4A9","ns":"CFX","apiset":"shared"},"0x58982680":{"name":"SET_INTERIOR_PORTAL_ROOM_TO","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"portalIndex","type":"int","description":"Interior portal index."},{"name":"roomTo","type":"int","description":"New value."}],"results":"void","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalIndex = 0\r\n\r\n  SetInteriorPortalRoomTo(interiorId, portalIndex, 0)\r\n  RefreshInterior(interiorId)\r\nend"}],"hash":"0x58982680","ns":"CFX","apiset":"client"},"0x447C718E":{"name":"SET_MAP_ZOOM_DATA_LEVEL","params":[{"name":"index","type":"int","description":"Zoom level index."},{"name":"zoomScale","type":"float","description":"fZoomScale value."},{"name":"zoomSpeed","type":"float","description":"fZoomSpeed value."},{"name":"scrollSpeed","type":"float","description":"fScrollSpeed value."},{"name":"tilesX","type":"float","description":"vTiles X."},{"name":"tilesY","type":"float","description":"vTiles Y."}],"results":"void","description":"Sets values to the zoom level data by index.","examples":[],"hash":"0x447C718E","ns":"CFX","apiset":"client"},"0x35E62B6A":{"name":"SET_DISCORD_RICH_PRESENCE_ASSET_SMALL_TEXT","params":[{"name":"text","type":"char*","description":"Text to be displayed when hovering over small image asset. Note that you must also set a valid small image asset using the SET_DISCORD_RICH_PRESENCE_ASSET_SMALL native."}],"results":"void","description":"This native sets the hover text of the small image asset for the discord rich presence implementation.","examples":[],"hash":"0x35E62B6A","ns":"CFX","apiset":"client"},"0x2D62133A":{"name":"SEND_DUI_MOUSE_WHEEL","params":[{"name":"duiObject","type":"long","description":"The DUI browser handle."},{"name":"deltaY","type":"int","description":"The wheel Y delta."},{"name":"deltaX","type":"int","description":"The wheel X delta."}],"results":"void","description":"Injects a 'mouse wheel' event for a DUI object.","examples":[],"hash":"0x2D62133A","ns":"CFX","apiset":"client"},"0x7F9D543":{"name":"SET_HANDLING_VECTOR","params":[{"name":"vehicle","type":"char*","description":"The vehicle class to set data for."},{"name":"class_","type":"char*","description":"The handling class to set. Only \"CHandlingData\" is supported at this time."},{"name":"fieldName","type":"char*","description":"The field name to set. These match the keys in `handling.meta`."},{"name":"value","type":"Vector3","description":"The Vector3 value to set."}],"results":"void","description":"Sets a global handling override for a specific vehicle class. The name is supposed to match the `handlingName` field from handling.meta.\r\nExample: `SetHandlingVector('AIRTUG', 'CHandlingData', 'vecCentreOfMassOffset', vector3(0.0, 0.0, -5.0))`","examples":[],"hash":"0x7F9D543","ns":"CFX","apt"},"0x36CA2554":{"name":"SET_MILLISECONDS_PER_GAME_MINUTE","params":[{"name":"value","type":"int","description":"Milliseconds."}],"results":"void","description":"Overrides how many real ms are equal to one game minute.\r\nA setter for [`GetMillisecondsPerGameMinute`](#\\_0x2F8B4D1C595B11DB).","examples":[],"hash":"0x36CA2554","ns":"CFX","apiset":"client"},"0x281B5448":{"name":"REGISTER_CONSOLE_LISTENER","params":[{"name":"listener","type":"func","description":"A function of `(channel: string, message: string) => void`. The message might contain `\\n`."}],"results":"void","description":"Registers a listener for console output messages.","examples":[],"hash":"0x281B5448","ns":"CFX","apiset":"server"},"0xF292858C":{"name":"SET_CONVAR_REPLICATED","params":[{"name":"varName","type":"char*"},{"name":"value","type":"char*"}],"results":"void","description":"","examples":[],"hash":"0xF292858C","ns":"CFX","apiset":"server"},"0x53DFD530":{"name":"SET_DISCORD_RICH_PRESENCE_ASSET","params":[{"name":"assetName","type":"char*","description":"The name of a valid asset registered on Discordapp's developer dashboard. note that the asset has to be registered under the same discord API application set using the SET_DISCORD_APP_ID native."}],"results":"void","description":"This native sets the image asset for the discord rich presence implementation.","examples":[],"hash":"0x53DFD530","ns":"CFX","apiset":"client"},"0xB8B4490C":{"name":"SET_MINIMAP_CLIP_TYPE","params":[{"name":"type","type":"int","description":"0 for rectangular, 1 for rounded."}],"results":"void","description":"Sets the type for the minimap blip clipping object to be either rectangular or rounded.","examples":[],"hash":"0xB8B4490C","ns":"CFX","apiset":"client","game":"gta5"},"0x1722C938":{"name":"SET_MANUAL_SHUTDOWN_LOADING_SCREEN_NUI","params":[{"name":"manualShutdown","type":"BOOL","description":"TRUE to manually shut down the loading screen NUI."}],"results":"void","description":"Sets whether or not `SHUTDOWN_LOADING_SCREEN` automatically shuts down the NUI frame for the loading screen. If this is enabled,\r\nyou will have to manually invoke `SHUTDOWN_LOADING_SCREEN_NUI` whenever you want to hide the NUI loading screen.","examples":[],"hash":"0x1722C938","ns":"CFX","apiset":"client"},"0x4FDCF51E":{"name":"SET_INTERIOR_ROOM_EXTENTS","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"roomIndex","type":"int","description":"Interior room index."},{"name":"bbMinX","type":"float"},{"name":"bbMinY","type":"float"},{"name":"bbMinZ","type":"float"},{"name":"bbMaxX","type":"float"},{"name":"bbMaxY","type":"float"},{"name":"bbMaxZ","type":"float"}],"results":"void","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  SetInteriorRoomExtents(interiorId, 0, -999.0, -999.0, -100.0, 999.0, 999.0, 100.0) -- 0 is a limbo usually\r\n  RefreshInterior(interiorId)\r\nend"}],"hash":"0x4FDCF51E","ns":"CFX","apiset":"client"},"0x7F6B8D75":{"name":"SET_MODEL_HEADLIGHT_CONFIGURATION","params":[{"name":"modelHash","type":"Hash"},{"name":"ratePerSecond","type":"float"},{"name":"headlightRotation","type":"float"},{"name":"invertRotation","type":"BOOL"}],"results":"void","description":"","examples":[],"hash":"0x7F6B8D75","ns":"CFX","apiset":"client"},"0x25F2B65F":{"name":"MUMBLE_ADD_VOICE_TARGET_PLAYER_BY_SERVER_ID","params":[{"name":"targetId","type":"int","description":"A Mumble voice target ID, ranging from 1..30 (inclusive)."},{"name":"ype":"int","description":"The player's server id."}],"results":"void","description":"Adds the specified player to the target list for the specified Mumble voice target ID.","examples":[],"hash":"0x25F2B65F","ns":"CFX","apiset":"client"},"0x5B98AE30":{"name":"SET_NUI_FOCUS","params":[{"name":"hasFocus","type":"BOOL"},{"name":"hasCursor","type":"BOOL"}],"results":"void","description":"","examples":[],"hash":"0x5B98AE30","ns":"CFX","apiset":"client"},"0x6A48B3CA":{"name":"SET_MINIMAP_OVERLAY_DISPLAY","params":[{"name":"miniMap","type":"int","description":"The minimap overlay ID."},{"name":"x","type":"float","description":"The X position for the overlay. This is equivalent to a game coordinate X."},{"name":"y","type":"float","description":"The Y position for the overlay. This is equivalent to a game coordinate Y, except that it's inverted (gfxY = -gameY)."},{"name":"xScale","type":"float","description":"The X scale for the overlay. This is equivalent to the Flash \\_xscale property, therefore 100 = 100%."},{"name":"yScale","type":"float","description":"The Y scale for the overlay. This is equivalent to the Flash \\_yscale property."},{"name":"alpha","type":"float","description":"The alpha value for the overlay. This is equivalent to the Flash \\_alpha property, therefore 100 = 100%."}],"results":"void","description":"Sets the display info for a minimap overlay.","examples":[],"hash":"0x6A48B3CA","ns":"CFX","apiset":"client"},"0x7BDCBD45":{"name":"SET_RICH_PRESENCE","params":[{"name":"presenceState","type":"char*","description":"The rich presence string to set."}],"results":"void","description":"Sets the player's rich presence detail state for social platform providers to a specified string.","examples":[],"hash":"0x7BDCBD45","ns":"CFX","apiset":"client"},"0xB7BA82DC":{"name":"SET_MAP_NAME","params":[{"name":"mapName","type":"char*"}],"results":"void","description":"","examples":[],"hash":"0xB7BA82DC","ns":"CFX","apiset":"server"},"0xFC02CAF6":{"name":"SET_PLAYER_TALKING_OVERRIDE","params":[{"name":"player","type":"Player","description":"The target player."},{"name":"state","type":"BOOL","description":"Overriding state."}],"results":"void","description":"the status of default voip system. It affects on `NETWORK_IS_PLAYER_TALKING` and `mp_facial` animation.\r\nThis function doesn't need to be called every frame, it works like a switcher.","examples":[],"hash":"0xFC02CAF6","ns":"CFX","apiset":"client"},"0x21C7A35B":{"name":"SET_RESOURCE_KVP","params":[{"name":"key","type":"char*"},{"name":"value","type":"char*"}],"results":"void","description":"","examples":[],"hash":"0x21C7A35B","ns":"CFX","apiset":"shared"},"0xAB65ACEE":{"name":"SET_RUNTIME_TEXTURE_PIXEL","params":[{"name":"tex","type":"long","description":"A handle to the runtime texture."},{"name":"x","type":"int","description":"The X position of the pixel to change."},{"name":"y","type":"int","description":"The Y position of the pixel to change."},{"name":"r","type":"int","description":"The new R value (0-255)."},{"name":"g","type":"int","description":"The new G value (0-255)."},{"name":"b","type":"int","description":"The new B value (0-255)."},{"name":"a","type":"int","description":"The new A value (0-255)."}],"results":"void","description":"Sets a pixel in the specified runtime texture. This will have to be committed using `COMMIT_RUNTIME_TEXTURE` to have any effect.","examples":[],"hash":"0xAB65ACEE","ns":"CFX","apiset":"client"},"0x87F43553":{"name":"SET_INTERIOR_PORTAL_CORNER_POSITION","params":[{"name":"interiorId","type":"int","description":"The target interior."}rtalIndex","type":"int","description":"Interior portal index."},{"name":"cornerIndex","type":"int","description":"Interior corner index."},{"name":"posX","type":"float"},{"name":"posY","type":"float"},{"name":"posZ","type":"float"}],"results":"void","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\n\r\nif interiorId ~= 0 then\r\n  local portalCount = GetInteriorPortalCount(interiorId)\r\n\r\n  -- rip portals\r\n  for portalIndex = 0, portalCount - 1 do\r\n    for cornerIndex = 0, 3 do -- 4 corners\r\n      SetInteriorPortalCornerPosition(interiorId, portalIndex, cornerIndex, 0.0, 0.0, 0.0)\r\n    end\r\n  end\r\n  \r\n  RefreshInterior(interiorId)\r\nend"}],"hash":"0x87F43553","ns":"CFX","apiset":"client"},"0x1B1052E2":{"name":"MUMBLE_SET_AUDIO_INPUT_DISTANCE","params":[{"name":"distance","type":"float","description":"The input distance."}],"results":"void","description":"Sets the current input distance. The player will be able to talk to other players within this distance.","examples":[],"hash":"0x1B1052E2","ns":"CFX","apiset":"client"},"0x8D50E33A":{"name":"SET_STATE_BAG_VALUE","params":[{"name":"bagName","type":"char*"},{"name":"keyName","type":"char*"},{"name":"valueData","type":"char*"},{"name":"valueLength","type":"int"},{"name":"replicated","type":"BOOL"}],"results":"void","description":"Internal function for setting a state bag value.","examples":[],"hash":"0x8D50E33A","ns":"CFX","apiset":"shared"},"0x6A2B1E8":{"name":"SET_RESOURCE_KVP_INT","params":[{"name":"key","type":"char*"},{"name":"value","type":"int"}],"results":"void","description":"","examples":[],"hash":"0x6A2B1E8","ns":"CFX","apiset":"shared"},"0x5518D60B":{"name":"SET_INTERIOR_ROOM_FLAG","params":[{"name":"interiorId","type":"int","description":"The target interior."},{"name":"roomIndex","type":"int","description":"Interior room index."},{"name":"flag","type":"int","description":"New flag value."}],"results":"void","description":"","examples":[{"lang":"lua","code":"local playerPed = PlayerPedId()\r\nlocal interiorId = GetInteriorFromEntity(playerPed)\r\nlocal roomHash = GetRoomKeyFromEntity(playerPed)\r\nlocal roomId = GetInteriorRoomIndexByHash(interiorId, roomHash)\r\n\r\nif roomId ~= -1 then\r\n  SetInteriorRoomFlag(interiorId, roomId, 64)\r\n  RefreshInterior(interiorId)\r\nend"}],"hash":"0x5518D60B","ns":"CFX","apiset":"client"},"0x3963D527":{"name":"SET_RUNTIME_TEXTURE_ARGB_DATA","params":[{"name":"tex","type":"long"},{"name":"buffer","type":"char*"},{"name":"length","type":"int"}],"results":"BOOL","description":"","examples":[],"hash":"0x3963D527","ns":"CFX","apiset":"client","resultsDescription":""},"0x5F3A3574":{"name":"SET_VEHICLE_AUTO_REPAIR_DISABLED","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to set disable auto vehicle repair."},{"name":"value","type":"BOOL","description":"Setting the value to  true prevents the vehicle from being repaired when a extra is enabled. Setting the value to false allows the vehicle from being repaired when a extra is enabled."}],"results":"void","description":"Disables the vehicle from being repaired when a vehicle extra is enabled.","examples":[],"hash":"0x5F3A3574","ns":"CFX","apiset":"client"},"0x97B2F9F8":{"name":"SET_TEXT_CHAT_ENABLED","params":[{"name":"enabled","type":"BOOL"}],"results":"BOOL","description":"","examples":[],"hash":"0x97B2F9F8","ns":"CFX","apiset":"client","resultsDescription":""},"0xA7DD3209":{"name":"SET_SNAKEOIL_FOR_ENTRY","params":[{"name":"name","type":"char*"},{type":"char*"},{"name":"data","type":"char*"}],"results":"void","description":"","examples":[],"hash":"0xA7DD3209","ns":"CFX","apiset":"client"},"0x6C93C4A9":{"name":"SET_VEHICLE_ENGINE_TEMPERATURE","params":[{"name":"vehicle","type":"Vehicle"},{"name":"temperature","type":"float"}],"results":"void","description":"","examples":[],"hash":"0x6C93C4A9","ns":"CFX","apiset":"client"},"0x2A01A8FC":{"name":"SET_VEHICLE_CURRENT_RPM","params":[{"name":"vehicle","type":"Vehicle"},{"name":"rpm","type":"float"}],"results":"void","description":"","examples":[],"hash":"0x2A01A8FC","ns":"CFX","apiset":"client"},"0x2F70ACED":{"name":"SET_VEHICLE_CLUTCH","params":[{"name":"vehicle","type":"Vehicle"},{"name":"clutch","type":"float"}],"results":"void","description":"","examples":[],"hash":"0x2F70ACED","ns":"CFX","apiset":"client"},"0x488C86D2":{"name":"SET_VEHICLE_HANDLING_FLOAT","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to set data for."},{"name":"class_","type":"char*","description":"The handling class to set. Only \"CHandlingData\" is supported at this time."},{"name":"fieldName","type":"char*","description":"The field name to set. These match the keys in `handling.meta`."},{"name":"value","type":"float","description":"The floating-point value to set."}],"results":"void","description":"Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_FLOAT`, this might require some experimentation.\r\nExample: `SetVehicleHandlingFloat(vehicle, 'CHandlingData', 'fSteeringLock', 360.0)`","examples":[],"hash":"0x488C86D2","ns":"CFX","apiset":"client"},"0x2BA40795":{"name":"SET_VEHICLE_HANDLING_FIELD","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to set data for."},{"name":"class_","type":"char*","description":"The handling class to set. Only \"CHandlingData\" is supported at this time."},{"name":"fieldName","type":"char*","description":"The field name to set. These match the keys in `handling.meta`."},{"name":"value","type":"Any","description":"The value to set."}],"results":"void","description":"Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_FIELD`, this might require some experimentation.\r\nExample: `SetVehicleHandlingField(vehicle, 'CHandlingData', 'fSteeringLock', 360.0)`","examples":[],"hash":"0x2BA40795","ns":"CFX","apiset":"client"},"0x90D1CAD1":{"name":"SET_VEHICLE_OIL_LEVEL","params":[{"name":"vehicle","type":"Vehicle"},{"name":"level","type":"float"}],"results":"void","description":"","examples":[],"hash":"0x90D1CAD1","ns":"CFX","apiset":"client"},"0x1A963E58":{"name":"SET_VEHICLE_GRAVITY_AMOUNT","params":[{"name":"vehicle","type":"Vehicle"},{"name":"gravity","type":"float"}],"results":"void","description":"","examples":[],"hash":"0x1A963E58","ns":"CFX","apiset":"client"},"0xB22ECEFD":{"name":"SET_VEHICLE_WHEEL_HEALTH","params":[{"name":"vehicle","type":"Vehicle"},{"name":"wheelIndex","type":"int"},{"name":"health","type":"float"}],"results":"void","description":"","examples":[],"hash":"0xB22ECEFD","ns":"CFX","apiset":"client"},"0x128737EA":{"name":"TRIGGER_LATENT_SERVER_EVENT_INTERNAL","params":[{"name":"eventName","type":"char*"},{"name":"eventPayload","type":"char*"},{"name":"payloadLength","type":"int"},{"name":"bps","type":"int"}],"results":"void","description":"The backing function for TriggerLatentServerEvent.","examples":[],"hash":"0x128737EA","ns":"CFX","apiset":"client"},"0x20B1B3E6":{"name":"SET_VEHICLE_HIGH_GEAR","params":[{"name":"vehicle",le"},{"name":"gear","type":"int"}],"results":"void","description":"","examples":[],"hash":"0x20B1B3E6","ns":"CFX","apiset":"client"},"0x21783161":{"name":"STOP_RESOURCE","params":[{"name":"resourceName","type":"char*"}],"results":"BOOL","description":"","examples":[],"hash":"0x21783161","ns":"CFX","apiset":"server","resultsDescription":""},"0xEAB8DB65":{"name":"SET_VEHICLE_WHEELIE_STATE","params":[{"name":"vehicle","type":"Vehicle","description":"Vehicle"},{"name":"state","type":"int","description":"Wheelie state"}],"results":"void","description":"Example script: https://pastebin.com/J6XGbkCW\n\nList of known states:\n\n```\n1: Not wheeling.\r\n65: Vehicle is ready to do wheelie (burnouting).\r\n129: Vehicle is doing wheelie.\n```","examples":[{"lang":"lua","code":"Citizen.CreateThread(function()\r\n  while true do\r\n    Wait(1)\r\n\r\n    local ped = PlayerPedId()\r\n    local veh = GetVehiclePedIsUsing(ped)\r\n\r\n    if veh ~= 0 then\r\n      -- is vehicle a musclecar\r\n      if GetVehicleClass(veh) == 4 then\r\n        -- is ped a driver\r\n        if GetPedInVehicleSeat(veh, -1) == ped then\r\n          -- don't let vehicle to do wheelie\r\n          SetVehicleWheelieState(veh, 1)\r\n        end\r\n      end\r\n    end\r\n  end\r\nend)"}],"hash":"0xEAB8DB65","ns":"CFX","apiset":"client"},"0xFFCCC2EA":{"name":"SET_VEHICLE_STEERING_ANGLE","params":[{"name":"vehicle","type":"Vehicle"},{"name":"angle","type":"float"}],"results":"void","description":"","examples":[],"hash":"0xFFCCC2EA","ns":"CFX","apiset":"client"},"0x91310870":{"name":"TRIGGER_EVENT_INTERNAL","params":[{"name":"eventName","type":"char*"},{"name":"eventPayload","type":"char*"},{"name":"payloadLength","type":"int"}],"results":"void","description":"The backing function for TriggerEvent.","examples":[],"hash":"0x91310870","ns":"CFX","apiset":"shared"},"0xB9234AFB":{"name":"SHUTDOWN_LOADING_SCREEN_NUI","params":[],"results":"void","description":"Shuts down the `loadingScreen` NUI frame, similarly to `SHUTDOWN_LOADING_SCREEN`.","examples":[],"hash":"0xB9234AFB","ns":"CFX","apiset":"client"},"0xC108EE6F":{"name":"SET_VEHICLE_ALARM_TIME_LEFT","params":[{"name":"vehicle","type":"Vehicle"},{"name":"time","type":"int"}],"results":"void","description":"","examples":[],"hash":"0xC108EE6F","ns":"CFX","apiset":"client"},"0xD1D31681":{"name":"SET_VISUAL_SETTING_FLOAT","params":[{"name":"name","type":"char*","description":"The name of the value to set, such as `pedLight.color.red`."},{"name":"value","type":"float","description":"The value to write."}],"results":"void","description":"Overrides a floating point value from `visualsettings.dat` temporarily.","examples":[],"hash":"0xD1D31681","ns":"CFX","apiset":"client"},"0xD7664FD1":{"name":"REGISTER_KEY_MAPPING","params":[{"name":"commandString","type":"char*","description":"The command to execute, and the identifier of the binding."},{"name":"description","type":"char*","description":"A description for in the settings menu."},{"name":"defaultMapper","type":"char*","description":"The mapper ID to use for the default binding, e.g. `keyboard`."},{"name":"defaultParameter","type":"char*","description":"The IO parameter ID to use for the default binding, e.g. `f3`."}],"results":"void","description":"Registers a key mapping for the current resource.\n\nSee the related [cookbook post](https://cookbook.fivem.net/2020/01/06/using-the-new-console-key-bindings/) for more information.","examples":[{"lang":"lua","code":"local handsUp = false\r\nCreateThread(function()\r\n    while true do\r\n        Wait(0)\r\n        if handsUp        TaskHandsUp(PlayerPedId(), 250, PlayerPedId(), -1, true)\r\n        end\r\n    end\r\nend)\r\nRegisterCommand('+handsup', function()\r\n    handsUp = true\r\nend, false)\r\nRegisterCommand('-handsup', function()\r\n    handsUp = false\r\nend, false)\r\nRegisterKeyMapping('+handsup', 'Hands Up', 'keyboard', 'i')"}],"hash":"0xD7664FD1","ns":"CFX","apiset":"client"},"0xF380E184":{"name":"SET_VEHICLE_WHEEL_RIM_COLLIDER_SIZE","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to obtain data for."},{"name":"wheelIndex","type":"int","description":"Index of wheel, 0-3."},{"name":"value","type":"float","description":"Size of rim collider."}],"results":"void","description":"Not sure what this changes, probably determines physical rim size in case the tire is blown.","examples":[],"hash":"0xF380E184","ns":"CFX","apiset":"client"},"0x2E310ACD":{"name":"VERIFY_PASSWORD_HASH","params":[{"name":"password","type":"char*"},{"name":"hash","type":"char*"}],"results":"BOOL","description":"","examples":[],"hash":"0x2E310ACD","ns":"CFX","apiset":"server","resultsDescription":""},"0x7FDD1128":{"name":"TRIGGER_SERVER_EVENT_INTERNAL","params":[{"name":"eventName","type":"char*"},{"name":"eventPayload","type":"char*"},{"name":"payloadLength","type":"int"}],"results":"void","description":"The backing function for TriggerServerEvent.","examples":[],"hash":"0x7FDD1128","ns":"CFX","apiset":"client"},"0xEB46596F":{"name":"SET_VEHICLE_STEERING_SCALE","params":[{"name":"vehicle","type":"Vehicle"},{"name":"scale","type":"float"}],"results":"void","description":"","examples":[],"hash":"0xEB46596F","ns":"CFX","apiset":"client"},"0x12497890":{"name":"SET_VEHICLE_HANDLING_VECTOR","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to set data for."},{"name":"class_","type":"char*","description":"The handling class to set. Only \"CHandlingData\" is supported at this time."},{"name":"fieldName","type":"char*","description":"The field name to set. These match the keys in `handling.meta`."},{"name":"value","type":"Vector3","description":"The Vector3 value to set."}],"results":"void","description":"Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_VECTOR`, this might require some experimentation.","examples":[],"hash":"0x12497890","ns":"CFX","apiset":"client"},"0x58382A19":{"name":"WAS_EVENT_CANCELED","params":[],"results":"BOOL","description":"Returns whether or not the currently executing event was canceled.","examples":[],"hash":"0x58382A19","ns":"CFX","apiset":"shared","resultsDescription":"A boolean."},"0xC37F4CF9":{"name":"SET_VEHICLE_HANDLING_INT","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to set data for."},{"name":"class_","type":"char*","description":"The handling class to set. Only \"CHandlingData\" is supported at this time."},{"name":"fieldName","type":"char*","description":"The field name to set. These match the keys in `handling.meta`."},{"name":"value","type":"int","description":"The integer value to set."}],"results":"void","description":"Sets a handling override for a specific vehicle. Certain handling flags can only be set globally using `SET_HANDLING_INT`, this might require some experimentation.","examples":[],"hash":"0xC37F4CF9","ns":"CFX","apiset":"client"},"0x8BBE6CC0":{"name":"SEND_LOADING_SCREEN_MESSAGE","params":[{"name":"jsonString","type":"char*","description":"The JSON-encoded message."}],"results":"BOOL","description":"Sends a message to the `loadingScreen` NUI frame, which contains the HTenced in `loadscreen` resources.","examples":[],"hash":"0x8BBE6CC0","ns":"CFX","apiset":"client","resultsDescription":"A success value."},"0xBA970511":{"name":"SET_VEHICLE_FUEL_LEVEL","params":[{"name":"vehicle","type":"Vehicle"},{"name":"level","type":"float"}],"results":"void","description":"","examples":[],"hash":"0xBA970511","ns":"CFX","apiset":"client"},"0x70B35890":{"name":"TRIGGER_LATENT_CLIENT_EVENT_INTERNAL","params":[{"name":"eventName","type":"char*"},{"name":"eventTarget","type":"char*"},{"name":"eventPayload","type":"char*"},{"name":"payloadLength","type":"int"},{"name":"bps","type":"int"}],"results":"void","description":"The backing function for TriggerLatentClientEvent.","examples":[],"hash":"0x70B35890","ns":"CFX","apiset":"server"},"0x47BD0270":{"name":"SET_VEHICLE_WHEEL_TIRE_COLLIDER_WIDTH","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to obtain data for."},{"name":"wheelIndex","type":"int","description":"Index of wheel, 0-3."},{"name":"value","type":"float","description":"Width of tire collider."}],"results":"void","description":"Use along with SetVehicleWheelWidth to resize the wheels (this native sets the collider width affecting physics while SetVehicleWheelWidth will change visual width).","examples":[],"hash":"0x47BD0270","ns":"CFX","apiset":"client"},"0xBD6357D":{"name":"SET_VEHICLE_WHEEL_X_OFFSET","params":[{"name":"vehicle","type":"Vehicle"},{"name":"wheelIndex","type":"int"},{"name":"offset","type":"float"}],"results":"void","description":"Adjusts the offset of the specified wheel relative to the wheel's axle center.\r\nNeeds to be called every frame in order to function properly, as GTA will reset the offset otherwise.\r\nThis function can be especially useful to set the track width of a vehicle, for example:\n\n```\nfunction SetVehicleFrontTrackWidth(vehicle, width)\r\nSetVehicleWheelXOffset(vehicle, 0, -width/2)\r\nSetVehicleWheelXOffset(vehicle, 1, width/2)\r\nend\n```","examples":[],"hash":"0xBD6357D","ns":"CFX","apiset":"client"},"0x64C3F1C0":{"name":"SET_VEHICLE_WHEEL_WIDTH","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to set data for."},{"name":"width","type":"float","description":"Width of the wheels (usually between 0.1 and 1.5 is reasonable)."}],"results":"BOOL","description":"Sets vehicle's wheels' width (width is the same for all the wheels, cannot get/set specific wheel of vehicle).\r\nOnly works on non-default wheels.\r\nReturns whether change was successful (can be false if trying to set width for non-default wheels).","examples":[],"hash":"0x64C3F1C0","ns":"CFX","apiset":"client","resultsDescription":"Bool - whether change was successful or not"},"0x1E35DBBA":{"name":"TEMP_BAN_PLAYER","params":[{"name":"playerSrc","type":"char*"},{"name":"reason","type":"char*"}],"results":"void","description":"","examples":[],"hash":"0x1E35DBBA","ns":"CFX","apiset":"server"},"0x29B440DC":{"name":"START_RESOURCE","params":[{"name":"resourceName","type":"char*"}],"results":"BOOL","description":"","examples":[],"hash":"0x29B440DC","ns":"CFX","apiset":"server","resultsDescription":""},"0x9ADD2938":{"name":"SET_RESOURCE_KVP_FLOAT","params":[{"name":"key","type":"char*"},{"name":"value","type":"float"}],"results":"void","description":"","examples":[],"hash":"0x9ADD2938","ns":"CFX","apiset":"shared"},"0x6485615E":{"name":"SET_VEHICLE_TURBO_PRESSURE","params":[{"name":"vehicle","type":"Vehicle"},{"name":"pressure","type":"float"}],"results":"void","description":"","examples":[],"hash":"0x6485615E","ns":"CFX","apiset":"client"},"0x2F7A49E6":{"nameIENT_EVENT_INTERNAL","params":[{"name":"eventName","type":"char*"},{"name":"eventTarget","type":"char*"},{"name":"eventPayload","type":"char*"},{"name":"payloadLength","type":"int"}],"results":"void","description":"The backing function for TriggerClientEvent.","examples":[],"hash":"0x2F7A49E6","ns":"CFX","apiset":"server"},"0xDD379006":{"name":"START_FIND_KVP","params":[{"name":"prefix","type":"char*"}],"results":"int","description":"","examples":[],"hash":"0xDD379006","ns":"CFX","apiset":"shared","resultsDescription":""},"0x53AB5C35":{"name":"SET_VEHICLE_WHEEL_SIZE","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to set data for."},{"name":"size","type":"float","description":"Size of the wheels (usually between 0.5 and 1.5 is reasonable)."}],"results":"BOOL","description":"Sets vehicle's wheels' size (size is the same for all the wheels, cannot get/set specific wheel of vehicle).\r\nOnly works on non-default wheels.\r\nReturns whether change was successful (can be false if trying to set size for non-default wheels).","examples":[],"hash":"0x53AB5C35","ns":"CFX","apiset":"client","resultsDescription":"Bool - whether change was successful or not"},"0xB962D05C":{"name":"SET_VEHICLE_WHEEL_TIRE_COLLIDER_SIZE","params":[{"name":"vehicle","type":"Vehicle","description":"The vehicle to obtain data for."},{"name":"wheelIndex","type":"int","description":"Index of wheel, 0-3."},{"name":"value","type":"float","description":"Radius of tire collider."}],"results":"void","description":"Use along with SetVehicleWheelSize to resize the wheels (this native sets the collider size affecting physics while SetVehicleWheelSize will change visual size).","examples":[],"hash":"0xB962D05C","ns":"CFX","apiset":"client"},"0xC7D2C20C":{"name":"IS_PLAYER_USING_SUPER_JUMP","params":[{"name":"playerSrc","type":"char*","description":"The player handle"}],"results":"BOOL","description":"","examples":[],"hash":"0xC7D2C20C","ns":"CFX","apiset":"server","resultsDescription":"A boolean."},"0xC6C2171F":{"name":"SET_VEHICLE_WHEEL_Y_ROTATION","params":[{"name":"vehicle","type":"Vehicle"},{"name":"wheelIndex","type":"int"},{"name":"value","type":"float"}],"results":"void","description":"","examples":[],"hash":"0xC6C2171F","ns":"CFX","apiset":"client","aliases":["SET_VEHICLE_WHEEL_XROT"]}}}
